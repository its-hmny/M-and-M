/**
 * @welldone-software/why-did-you-render 4.3.2
 * MIT Licensed
 * Generated by Vitali Zaidman <vzaidman@gmail.com> (https://github.com/vzaidman)
 * Generated at 2020-09-20
 */

'use strict';

var _get$1 = require('lodash/get');
var _isString = require('lodash/isString');
var _reduce = require('lodash/reduce');
var _has = require('lodash/has');
var _keys = require('lodash/keys');
var _isSet = require('lodash/isSet');
var _isFunction = require('lodash/isFunction');
var _isRegExp = require('lodash/isRegExp');
var _isDate = require('lodash/isDate');
var _isPlainObject = require('lodash/isPlainObject');
var _isArray = require('lodash/isArray');
var _defaults = require('lodash/defaults');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _get__default = /*#__PURE__*/_interopDefaultLegacy(_get$1);
var _isString__default = /*#__PURE__*/_interopDefaultLegacy(_isString);
var _reduce__default = /*#__PURE__*/_interopDefaultLegacy(_reduce);
var _has__default = /*#__PURE__*/_interopDefaultLegacy(_has);
var _keys__default = /*#__PURE__*/_interopDefaultLegacy(_keys);
var _isSet__default = /*#__PURE__*/_interopDefaultLegacy(_isSet);
var _isFunction__default = /*#__PURE__*/_interopDefaultLegacy(_isFunction);
var _isRegExp__default = /*#__PURE__*/_interopDefaultLegacy(_isRegExp);
var _isDate__default = /*#__PURE__*/_interopDefaultLegacy(_isDate);
var _isPlainObject__default = /*#__PURE__*/_interopDefaultLegacy(_isPlainObject);
var _isArray__default = /*#__PURE__*/_interopDefaultLegacy(_isArray);
var _defaults__default = /*#__PURE__*/_interopDefaultLegacy(_defaults);

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _createForOfIteratorHelper(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;

      var F = function () {};

      return {
        s: F,
        n: function () {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function (e) {
          throw e;
        },
        f: F
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var normalCompletion = true,
      didErr = false,
      err;
  return {
    s: function () {
      it = o[Symbol.iterator]();
    },
    n: function () {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function (e) {
      didErr = true;
      err = e;
    },
    f: function () {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}

var diffTypes = {
  'different': 'different',
  'deepEquals': 'deepEquals',
  'date': 'date',
  'regex': 'regex',
  'reactElement': 'reactElement',
  'function': 'function'
}; // copied from packages/shared/ReactSymbols.js in https://github.com/facebook/react

var hasSymbol = typeof Symbol === 'function' && Symbol["for"];
var REACT_MEMO_TYPE = hasSymbol ? Symbol["for"]('react.memo') : 0xead3;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol["for"]('react.forward_ref') : 0xead0;

var _diffTypesDescription;
var moreInfoUrl = 'http://bit.ly/wdyr02';
var moreInfoHooksUrl = 'http://bit.ly/wdyr3';
var diffTypesDescriptions = (_diffTypesDescription = {}, _defineProperty(_diffTypesDescription, diffTypes.different, 'different objects.'), _defineProperty(_diffTypesDescription, diffTypes.deepEquals, 'different objects that are equal by value.'), _defineProperty(_diffTypesDescription, diffTypes.date, 'different date objects with the same value.'), _defineProperty(_diffTypesDescription, diffTypes.regex, 'different regular expressions with the same value.'), _defineProperty(_diffTypesDescription, diffTypes.reactElement, 'different React elements (remember that the <jsx/> syntax always produces a *NEW* immutable React element so a component that receives <jsx/> as props always re-renders.).'), _defineProperty(_diffTypesDescription, diffTypes["function"], 'different functions with the same name.'), _diffTypesDescription);
var inHotReload = false;

function shouldLog(reason, Component, options) {
  if (inHotReload) {
    return false;
  }

  if (options.logOnDifferentValues) {
    return true;
  }

  if (Component.whyDidYouRender && Component.whyDidYouRender.logOnDifferentValues) {
    return true;
  }

  var hasDifferentValues = reason.propsDifferences && reason.propsDifferences.some(function (diff) {
    return diff.diffType === diffTypes.different;
  }) || reason.stateDifferences && reason.stateDifferences.some(function (diff) {
    return diff.diffType === diffTypes.different;
  }) || reason.hookDifferences && reason.hookDifferences.some(function (diff) {
    return diff.diffType === diffTypes.different;
  });
  return !hasDifferentValues;
}

function logDifference(_ref) {
  var Component = _ref.Component,
      displayName = _ref.displayName,
      hookName = _ref.hookName,
      prefixMessage = _ref.prefixMessage,
      diffObjType = _ref.diffObjType,
      differences = _ref.differences,
      values = _ref.values,
      options = _ref.options;

  if (differences && differences.length > 0) {
    options.consoleLog(_defineProperty({}, displayName, Component), "".concat(prefixMessage, " of ").concat(diffObjType, " changes:"));
    differences.forEach(function (_ref2) {
      var pathString = _ref2.pathString,
          diffType = _ref2.diffType,
          prevValue = _ref2.prevValue,
          nextValue = _ref2.nextValue;
      options.consoleGroup("%c".concat(diffObjType === 'hook' ? "[hook ".concat(hookName, " result]") : "".concat(diffObjType, "."), "%c").concat(pathString, "%c"), "color:".concat(options.diffNameColor, ";"), "color:".concat(options.diffPathColor, ";"), 'color:default;');
      options.consoleLog("".concat(diffTypesDescriptions[diffType], " (more info at ").concat(hookName ? moreInfoHooksUrl : moreInfoUrl, ")"));
      options.consoleLog(_defineProperty({}, "prev ".concat(pathString), prevValue), '!==', _defineProperty({}, "next ".concat(pathString), nextValue));
      options.consoleGroupEnd();
    });
  } else if (differences) {
    options.consoleLog(_defineProperty({}, displayName, Component), "".concat(prefixMessage, " the ").concat(diffObjType, " object itself changed but its values are all equal."), diffObjType === 'props' ? 'This could have been avoided by making the component pure, or by preventing its father from re-rendering.' : 'This usually means this component called setState when no changes in its state actually occurred.', "More info at ".concat(moreInfoUrl));
    options.consoleLog("prev ".concat(diffObjType, ":"), values.prev, ' !== ', values.next, ":next ".concat(diffObjType));
  }
}

function defaultNotifier(updateInfo) {
  var Component = updateInfo.Component,
      displayName = updateInfo.displayName,
      hookName = updateInfo.hookName,
      prevProps = updateInfo.prevProps,
      prevState = updateInfo.prevState,
      prevHook = updateInfo.prevHook,
      nextProps = updateInfo.nextProps,
      nextState = updateInfo.nextState,
      nextHook = updateInfo.nextHook,
      reason = updateInfo.reason,
      options = updateInfo.options,
      ownerDataMap = updateInfo.ownerDataMap;

  if (!shouldLog(reason, Component, options)) {
    return;
  }

  options.consoleGroup("%c".concat(displayName), "color: ".concat(options.titleColor, ";"));
  var prefixMessage = 'Re-rendered because';

  if (reason.propsDifferences) {
    logDifference({
      Component: Component,
      displayName: displayName,
      prefixMessage: prefixMessage,
      diffObjType: 'props',
      differences: reason.propsDifferences,
      values: {
        prev: prevProps,
        next: nextProps
      },
      options: options
    });
    prefixMessage = 'And because';
  }

  if (reason.stateDifferences) {
    logDifference({
      Component: Component,
      displayName: displayName,
      prefixMessage: prefixMessage,
      diffObjType: 'state',
      differences: reason.stateDifferences,
      values: {
        prev: prevState,
        next: nextState
      },
      options: options
    });
  }

  if (reason.hookDifferences) {
    logDifference({
      Component: Component,
      displayName: displayName,
      prefixMessage: prefixMessage,
      diffObjType: 'hook',
      differences: reason.hookDifferences,
      values: {
        prev: prevHook,
        next: nextHook
      },
      hookName: hookName,
      options: options
    });
  }

  if (reason.propsDifferences && reason.ownerDifferences) {
    var prevOwnerData = ownerDataMap.get(prevProps);
    var nextOwnerData = ownerDataMap.get(nextProps);
    options.consoleGroup("Rendered by ".concat(nextOwnerData.displayName));
    var _prefixMessage = 'Re-rendered because';

    if (reason.ownerDifferences.propsDifferences) {
      logDifference({
        Component: nextOwnerData.Component,
        displayName: nextOwnerData.displayName,
        prefixMessage: _prefixMessage,
        diffObjType: 'props',
        differences: reason.ownerDifferences.propsDifferences,
        values: {
          prev: prevOwnerData.props,
          next: nextOwnerData.props
        },
        options: options
      });
      _prefixMessage = 'And because';
    }

    if (reason.ownerDifferences.stateDifferences) {
      logDifference({
        Component: nextOwnerData.Component,
        displayName: nextOwnerData.displayName,
        prefixMessage: _prefixMessage,
        diffObjType: 'state',
        differences: reason.ownerDifferences.stateDifferences,
        values: {
          prev: prevOwnerData.state,
          next: nextOwnerData.state
        },
        options: options
      });
    }

    if (reason.ownerDifferences.hookDifferences) {
      reason.ownerDifferences.hookDifferences.forEach(function (_ref3, i) {
        var hookName = _ref3.hookName,
            differences = _ref3.differences;
        return logDifference({
          Component: nextOwnerData.Component,
          displayName: nextOwnerData.displayName,
          prefixMessage: _prefixMessage,
          diffObjType: 'hook',
          differences: differences,
          values: {
            prev: prevOwnerData.hooks[i].result,
            next: nextOwnerData.hooks[i].result
          },
          hookName: hookName,
          options: options
        });
      });
    }

    options.consoleGroupEnd();
  }

  if (!reason.propsDifferences && !reason.stateDifferences && !reason.hookDifferences) {
    options.consoleLog(_defineProperty({}, displayName, Component), 'Re-rendered although props and state objects are the same.', 'This usually means there was a call to this.forceUpdate() inside the component.', "more info at ".concat(moreInfoUrl));
  }

  options.consoleGroupEnd();
}
function createDefaultNotifier(hotReloadBufferMs) {
  if (hotReloadBufferMs) {
    if (typeof module !== 'undefined' && module.hot && module.hot.addStatusHandler) {
      module.hot.addStatusHandler(function (status) {
        if (status === 'idle') {
          inHotReload = true;
          setTimeout(function () {
            inHotReload = false;
          }, hotReloadBufferMs);
        }
      });
    }
  }

  return defaultNotifier;
}

var emptyFn = function emptyFn() {};

function normalizeOptions() {
  var userOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var consoleGroup = console.group;
  var consoleGroupEnd = console.groupEnd;

  if (userOptions.collapseGroups) {
    consoleGroup = console.groupCollapsed;
  } else if (userOptions.onlyLogs) {
    consoleGroup = console.log;
    consoleGroupEnd = emptyFn;
  }

  var notifier = userOptions.notifier || createDefaultNotifier('hotReloadBufferMs' in userOptions ? userOptions.hotReloadBufferMs : 500);
  return _objectSpread2({
    include: null,
    exclude: null,
    notifier: notifier,
    onlyLogs: false,
    consoleLog: console.log,
    consoleGroup: consoleGroup,
    consoleGroupEnd: consoleGroupEnd,
    logOnDifferentValues: false,
    logOwnerReasons: false,
    trackHooks: true,
    titleColor: '#058',
    diffNameColor: 'blue',
    diffPathColor: 'red',
    trackExtraHooks: [],
    trackAllPureComponents: false
  }, userOptions);
}

function getDisplayName(type) {
  return type.displayName || type.name || type.type && getDisplayName(type.type) || type.render && getDisplayName(type.render) || (_isString__default['default'](type) ? type : undefined);
}

var hasElementType = typeof Element !== 'undefined'; // copied from https://github.com/facebook/react/packages/shared/ReactSymbols.js

var hasSymbol$1 = typeof Symbol === 'function' && Symbol["for"];
var REACT_ELEMENT_TYPE = hasSymbol$1 ? Symbol["for"]('react.element') : 0xeac7;

var isReactElement = function isReactElement(object) {
  return object.$$typeof === REACT_ELEMENT_TYPE;
}; // end


function trackDiff(a, b, diffsAccumulator, pathString, diffType) {
  diffsAccumulator.push({
    diffType: diffType,
    pathString: pathString,
    prevValue: a,
    nextValue: b
  });
  return diffType !== diffTypes.different;
}

function accumulateDeepEqualDiffs(a, b, diffsAccumulator) {
  var pathString = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

  if (a === b) {
    return true;
  }

  if (!a || !b) {
    return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);
  }

  if (_isArray__default['default'](a) && _isArray__default['default'](b)) {
    var arrayLength = a.length;

    if (arrayLength !== b.length) {
      return trackDiff(_toConsumableArray(a), _toConsumableArray(b), diffsAccumulator, pathString, diffTypes.different);
    }

    var arrayItemDiffs = [];
    var numberOfDeepEqualsItems = 0;

    for (var i = arrayLength; i--; i > 0) {
      var diffEquals = accumulateDeepEqualDiffs(a[i], b[i], arrayItemDiffs, "".concat(pathString, "[").concat(i, "]"));

      if (diffEquals) {
        numberOfDeepEqualsItems++;
      }
    }

    if (numberOfDeepEqualsItems === arrayLength) {
      return trackDiff(_toConsumableArray(a), _toConsumableArray(b), diffsAccumulator, pathString, diffTypes.deepEquals);
    }

    diffsAccumulator.push.apply(diffsAccumulator, arrayItemDiffs);
    return trackDiff(_toConsumableArray(a), _toConsumableArray(b), diffsAccumulator, pathString, diffTypes.different);
  }

  if (_isSet__default['default'](a) && _isSet__default['default'](b)) {
    if (a.size !== b.size) {
      return trackDiff(new Set(a), new Set(b), diffsAccumulator, pathString, diffTypes.different);
    }

    var _iterator = _createForOfIteratorHelper(a),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var valA = _step.value;

        if (!b.has(valA)) {
          return trackDiff(new Set(a), new Set(b), diffsAccumulator, pathString, diffTypes.different);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return trackDiff(new Set(a), new Set(b), diffsAccumulator, pathString, diffTypes.deepEquals);
  }

  if (_isDate__default['default'](a) && _isDate__default['default'](b)) {
    return a.getTime() === b.getTime() ? trackDiff(new Date(a), new Date(b), diffsAccumulator, pathString, diffTypes.date) : trackDiff(new Date(a), new Date(b), diffsAccumulator, pathString, diffTypes.different);
  }

  if (_isRegExp__default['default'](a) && _isRegExp__default['default'](b)) {
    return a.toString() === b.toString() ? trackDiff(a, b, diffsAccumulator, pathString, diffTypes.regex) : trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);
  }

  if (hasElementType && a instanceof Element && b instanceof Element) {
    return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);
  }

  if (isReactElement(a) && isReactElement(b)) {
    if (a.type !== b.type) {
      return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);
    }

    var reactElementPropsAreDeepEqual = accumulateDeepEqualDiffs(a.props, b.props, [], "".concat(pathString, ".props"));
    return reactElementPropsAreDeepEqual ? trackDiff(a, b, diffsAccumulator, pathString, diffTypes.reactElement) : trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);
  }

  if (_isFunction__default['default'](a) && _isFunction__default['default'](b)) {
    return a.name === b.name ? trackDiff(a, b, diffsAccumulator, pathString, diffTypes["function"]) : trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);
  }

  if (_isPlainObject__default['default'](a) && _isPlainObject__default['default'](b)) {
    var keys = _keys__default['default'](a);

    var keysLength = keys.length;

    if (keysLength !== _keys__default['default'](b).length) {
      return trackDiff(_objectSpread2({}, a), _objectSpread2({}, b), diffsAccumulator, pathString, diffTypes.different);
    }

    for (var _i = keysLength; _i--; _i > 0) {
      if (!_has__default['default'](b, keys[_i])) {
        return trackDiff(_objectSpread2({}, a), _objectSpread2({}, b), diffsAccumulator, pathString, diffTypes.different);
      }
    }

    var objectValuesDiffs = [];
    var numberOfDeepEqualsObjectValues = 0;

    for (var _i2 = keysLength; _i2--; _i2 > 0) {
      var key = keys[_i2];
      var deepEquals = accumulateDeepEqualDiffs(a[key], b[key], objectValuesDiffs, "".concat(pathString, ".").concat(key));

      if (deepEquals) {
        numberOfDeepEqualsObjectValues++;
      }
    }

    if (numberOfDeepEqualsObjectValues === keysLength) {
      return trackDiff(_objectSpread2({}, a), _objectSpread2({}, b), diffsAccumulator, pathString, diffTypes.deepEquals);
    }

    diffsAccumulator.push.apply(diffsAccumulator, objectValuesDiffs);
    return trackDiff(_objectSpread2({}, a), _objectSpread2({}, b), diffsAccumulator, pathString, diffTypes.different);
  }

  return trackDiff(a, b, diffsAccumulator, pathString, diffTypes.different);
}

function calculateDeepEqualDiffs(a, b, initialPathString) {
  try {
    var diffs = [];
    accumulateDeepEqualDiffs(a, b, diffs, initialPathString);
    return diffs;
  } catch (error) {
    if (error.message && error.message.match(/stack|recursion/i) || error.number === -2146828260) {
      // warn on circular references, don't crash.
      // browsers throw different errors name and messages:
      // chrome/safari: "RangeError", "Maximum call stack size exceeded"
      // firefox: "InternalError", too much recursion"
      // edge: "Error", "Out of stack space"
      // eslint-disable-next-line no-console
      console.warn('Warning: why-did-you-render couldn\'t handle circular references in props.', error.name, error.message);
      return false;
    }

    throw error;
  }
}

var emptyObject = {};
function findObjectsDifferences(userPrevObj, userNextObj) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$shallow = _ref.shallow,
      shallow = _ref$shallow === void 0 ? true : _ref$shallow;

  if (userPrevObj === userNextObj) {
    return false;
  }

  if (!shallow) {
    return calculateDeepEqualDiffs(userPrevObj, userNextObj);
  }

  var prevObj = userPrevObj || emptyObject;
  var nextObj = userNextObj || emptyObject;
  var keysOfBothObjects = Object.keys(_objectSpread2(_objectSpread2({}, prevObj), nextObj));
  return _reduce__default['default'](keysOfBothObjects, function (result, key) {
    var deepEqualDiffs = calculateDeepEqualDiffs(prevObj[key], nextObj[key], key);

    if (deepEqualDiffs) {
      result = [].concat(_toConsumableArray(result), _toConsumableArray(deepEqualDiffs));
    }

    return result;
  }, []);
}

function getOwnerDifferences(_ref) {
  var prevOwnerData = _ref.prevOwnerData,
      nextOwnerData = _ref.nextOwnerData;

  if (!prevOwnerData || !nextOwnerData) {
    return false;
  } // in strict mode prevOwnerData might be twice as lengthy because of double renders


  var prevOwnerDataHooks = prevOwnerData.hooks.length === nextOwnerData.hooks.length * 2 ? prevOwnerData.hooks.slice(prevOwnerData.hooks.length / 2) : prevOwnerData.hooks;
  var hookDifferences = prevOwnerDataHooks.map(function (_ref2, i) {
    var hookName = _ref2.hookName,
        result = _ref2.result;
    return {
      hookName: hookName,
      differences: findObjectsDifferences(result, nextOwnerData.hooks[i].result, {
        shallow: false
      })
    };
  });
  return {
    propsDifferences: findObjectsDifferences(prevOwnerData.props, nextOwnerData.props),
    stateDifferences: findObjectsDifferences(prevOwnerData.state, nextOwnerData.state),
    hookDifferences: hookDifferences.length > 0 ? hookDifferences : false
  };
}

function getUpdateReason(prevProps, prevState, prevHook, nextProps, nextState, nextHook, ownerDataMap) {
  var prevOwnerData = ownerDataMap.get(prevProps);
  var nextOwnerData = ownerDataMap.get(nextProps);
  return {
    propsDifferences: findObjectsDifferences(prevProps, nextProps),
    stateDifferences: findObjectsDifferences(prevState, nextState),
    hookDifferences: findObjectsDifferences(prevHook, nextHook, {
      shallow: false
    }),
    ownerDifferences: getOwnerDifferences({
      prevOwnerData: prevOwnerData,
      nextOwnerData: nextOwnerData
    })
  };
}

function getUpdateInfo(_ref3) {
  var Component = _ref3.Component,
      displayName = _ref3.displayName,
      hookName = _ref3.hookName,
      prevProps = _ref3.prevProps,
      prevState = _ref3.prevState,
      prevHook = _ref3.prevHook,
      nextProps = _ref3.nextProps,
      nextState = _ref3.nextState,
      nextHook = _ref3.nextHook,
      options = _ref3.options,
      ownerDataMap = _ref3.ownerDataMap;
  return {
    Component: Component,
    displayName: displayName,
    hookName: hookName,
    prevProps: prevProps,
    prevState: prevState,
    prevHook: prevHook,
    nextProps: nextProps,
    nextState: nextState,
    nextHook: nextHook,
    options: options,
    ownerDataMap: ownerDataMap,
    reason: getUpdateReason(prevProps, prevState, prevHook, nextProps, nextState, nextHook, ownerDataMap)
  };
}

// copied from https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactTypeOfMode.js
var StrictMode = 1; // based on "findStrictRoot" from https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactStrictModeWarnings.js
// notice: this is only used for class components. functional components doesn't re-rendered inside strict mode

function checkIfInsideAStrictModeTree(reactComponentInstance) {
  var reactInternalFiber = reactComponentInstance && reactComponentInstance._reactInternalFiber;

  while (reactInternalFiber) {
    if (reactInternalFiber.mode & StrictMode) {
      return true;
    }

    reactInternalFiber = reactInternalFiber["return"];
  }

  return false;
}
function isReactClassComponent(Component) {
  return Component.prototype && !!Component.prototype.isReactComponent;
}
function isMemoComponent(Component) {
  return Component.$$typeof === REACT_MEMO_TYPE;
}
function isForwardRefComponent(Component) {
  return Component.$$typeof === REACT_FORWARD_REF_TYPE;
}

function shouldInclude(displayName, options) {
  return options.include && options.include.length > 0 && options.include.some(function (regex) {
    return regex.test(displayName);
  });
}

function shouldExclude(displayName, options) {
  return options.exclude && options.exclude.length > 0 && options.exclude.some(function (regex) {
    return regex.test(displayName);
  });
}

function shouldTrack(_ref) {
  var Component = _ref.Component,
      displayName = _ref.displayName,
      options = _ref.options,
      React = _ref.React,
      isHookChange = _ref.isHookChange;

  if (shouldExclude(displayName, options)) {
    return false;
  }

  if (Component.whyDidYouRender === false) {
    return false;
  }

  if (isHookChange && Component.whyDidYouRender && Component.whyDidYouRender.trackHooks === false) {
    return false;
  }

  return !!(Component.whyDidYouRender || options.trackAllPureComponents && (Component && Component.prototype instanceof React.PureComponent || isMemoComponent(Component)) || shouldInclude(displayName, options));
}

function patchClassComponent(ClassComponent, displayName, React, options, ownerDataMap) {
  var WDYRPatchedClassComponent = /*#__PURE__*/function (_ClassComponent) {
    _inherits(WDYRPatchedClassComponent, _ClassComponent);

    var _super = _createSuper(WDYRPatchedClassComponent);

    function WDYRPatchedClassComponent(props, context) {
      var _thisSuper, _this;

      _classCallCheck(this, WDYRPatchedClassComponent);

      _this = _super.call(this, props, context);
      _this._WDYR = {
        renderNumber: 0
      };

      var origRender = _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(WDYRPatchedClassComponent.prototype)), "render", _thisSuper) || _this.render; // this probably means render is an arrow function or this.render.bind(this) was called on the original class


      var renderIsABindedFunction = origRender !== ClassComponent.prototype.render;

      if (renderIsABindedFunction) {
        _this.render = function () {
          WDYRPatchedClassComponent.prototype.render.apply(_assertThisInitialized(_this));
          return origRender();
        };
      }

      return _this;
    }

    _createClass(WDYRPatchedClassComponent, [{
      key: "render",
      value: function render() {
        this._WDYR.renderNumber++;

        if (!('isStrictMode' in this._WDYR)) {
          this._WDYR.isStrictMode = checkIfInsideAStrictModeTree(this);
        } // in strict mode- ignore every other render


        if (!(this._WDYR.isStrictMode && this._WDYR.renderNumber % 2 === 1)) {
          if (this._WDYR.prevProps) {
            var updateInfo = getUpdateInfo({
              Component: ClassComponent,
              displayName: displayName,
              prevProps: this._WDYR.prevProps,
              prevState: this._WDYR.prevState,
              nextProps: this.props,
              nextState: this.state,
              options: options,
              ownerDataMap: ownerDataMap
            });
            options.notifier(updateInfo);
          }

          this._WDYR.prevProps = this.props;
          this._WDYR.prevState = this.state;
        }

        return _get(_getPrototypeOf(WDYRPatchedClassComponent.prototype), "render", this) ? _get(_getPrototypeOf(WDYRPatchedClassComponent.prototype), "render", this).call(this) : null;
      }
    }]);

    return WDYRPatchedClassComponent;
  }(ClassComponent);

  try {
    WDYRPatchedClassComponent.displayName = displayName;
  } catch (e) {// not crucial if displayName couldn't be set
  }

  _defaults__default['default'](WDYRPatchedClassComponent, ClassComponent);

  return WDYRPatchedClassComponent;
}

var getFunctionalComponentFromStringComponent = function getFunctionalComponentFromStringComponent(componentTypeStr, React) {
  return function (props) {
    return React.createElement(componentTypeStr, props);
  };
};

function patchFunctionalOrStrComponent(FunctionalOrStringComponent, isPure, displayName, React, options, ownerDataMap) {
  var FunctionalComponent = typeof FunctionalOrStringComponent === 'string' ? getFunctionalComponentFromStringComponent(FunctionalOrStringComponent, React) : FunctionalOrStringComponent;

  function WDYRFunctionalComponent() {
    var nextProps = arguments[0];
    var ref = React.useRef();
    var prevProps = ref.current;
    ref.current = nextProps;

    if (prevProps) {
      var updateInfo = getUpdateInfo({
        Component: FunctionalComponent,
        displayName: displayName,
        prevProps: prevProps,
        nextProps: nextProps,
        options: options,
        ownerDataMap: ownerDataMap
      });
      var notifiedByHooks = !updateInfo.reason.propsDifferences || isPure && updateInfo.reason.propsDifferences.length === 0;

      if (!notifiedByHooks) {
        options.notifier(updateInfo);
      }
    }

    return FunctionalComponent.apply(void 0, arguments);
  }

  try {
    WDYRFunctionalComponent.displayName = displayName;
  } catch (e) {// not crucial if displayName couldn't be set
  }

  WDYRFunctionalComponent.ComponentForHooksTracking = FunctionalComponent;

  _defaults__default['default'](WDYRFunctionalComponent, FunctionalComponent);

  return WDYRFunctionalComponent;
}

function patchMemoComponent(MemoComponent, displayName, React, options, ownerDataMap) {
  var InnerMemoComponent = MemoComponent.type;
  var isInnerMemoComponentAClassComponent = isReactClassComponent(InnerMemoComponent);
  var isInnerMemoComponentForwardRefs = isForwardRefComponent(InnerMemoComponent);
  var isInnerMemoComponentAnotherMemoComponent = isMemoComponent(InnerMemoComponent);
  var WrappedFunctionalComponent = isInnerMemoComponentForwardRefs ? InnerMemoComponent.render : InnerMemoComponent;
  var PatchedInnerComponent = isInnerMemoComponentAClassComponent ? patchClassComponent(WrappedFunctionalComponent, displayName, React, options, ownerDataMap) : isInnerMemoComponentAnotherMemoComponent ? patchMemoComponent(WrappedFunctionalComponent, displayName, React, options, ownerDataMap) : patchFunctionalOrStrComponent(WrappedFunctionalComponent, true, displayName, React, options, ownerDataMap);

  try {
    PatchedInnerComponent.displayName = getDisplayName(WrappedFunctionalComponent);
  } catch (e) {// not crucial if displayName couldn't be set
  }

  PatchedInnerComponent.ComponentForHooksTracking = MemoComponent;

  _defaults__default['default'](PatchedInnerComponent, WrappedFunctionalComponent);

  var WDYRMemoizedFunctionalComponent = React.memo(isInnerMemoComponentForwardRefs ? React.forwardRef(PatchedInnerComponent) : PatchedInnerComponent, MemoComponent.compare);

  try {
    WDYRMemoizedFunctionalComponent.displayName = displayName;
  } catch (e) {// not crucial if displayName couldn't be set
  }

  _defaults__default['default'](WDYRMemoizedFunctionalComponent, MemoComponent);

  return WDYRMemoizedFunctionalComponent;
}

function patchForwardRefComponent(ForwardRefComponent, displayName, React, options, ownerDataMap) {
  var InnerForwardRefComponent = ForwardRefComponent.render;
  var isInnerComponentMemoized = isMemoComponent(InnerForwardRefComponent);
  var WrappedFunctionalComponent = isInnerComponentMemoized ? InnerForwardRefComponent.type : InnerForwardRefComponent;
  var WDYRWrappedByReactForwardRefFunctionalComponent = patchFunctionalOrStrComponent(WrappedFunctionalComponent, isInnerComponentMemoized, displayName, React, options, ownerDataMap);
  WDYRWrappedByReactForwardRefFunctionalComponent.displayName = getDisplayName(WrappedFunctionalComponent);
  WDYRWrappedByReactForwardRefFunctionalComponent.ComponentForHooksTracking = WrappedFunctionalComponent;

  _defaults__default['default'](WDYRWrappedByReactForwardRefFunctionalComponent, WrappedFunctionalComponent);

  var WDYRForwardRefFunctionalComponent = React.forwardRef(isInnerComponentMemoized ? React.memo(WDYRWrappedByReactForwardRefFunctionalComponent, InnerForwardRefComponent.compare) : WDYRWrappedByReactForwardRefFunctionalComponent);

  try {
    WDYRForwardRefFunctionalComponent.displayName = displayName;
  } catch (e) {// not crucial if displayName couldn't be set
  }

  _defaults__default['default'](WDYRForwardRefFunctionalComponent, ForwardRefComponent);

  return WDYRForwardRefFunctionalComponent;
}

var initialHookValue = Symbol('initial-hook-value');

function trackHookChanges(hookName, _ref, hookResult, React, options, ownerDataMap, hooksRef) {
  var hookPath = _ref.path;
  var nextHook = hookPath ? _get__default['default'](hookResult, hookPath) : hookResult;
  var renderNumber = React.useRef(1);

  if (hooksRef.current[0] != null && renderNumber.current !== hooksRef.current[0].renderNumber) {
    hooksRef.current = [];
  }

  hooksRef.current.push({
    hookName: hookName,
    result: nextHook,
    renderNumber: renderNumber.current
  });
  renderNumber.current++;
  var ComponentHookDispatchedFromInstance = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED && React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;
  var prevHookResultRef = React.useRef(initialHookValue);

  if (!ComponentHookDispatchedFromInstance) {
    return hookResult;
  }

  var Component = ComponentHookDispatchedFromInstance.type.ComponentForHooksTracking || ComponentHookDispatchedFromInstance.type;
  var displayName = getDisplayName(Component);
  var isShouldTrack = shouldTrack({
    Component: Component,
    displayName: displayName,
    options: options,
    React: React,
    isHookChange: true
  });

  if (!isShouldTrack) {
    return hookResult;
  }

  var prevHookResult = prevHookResultRef.current;
  prevHookResultRef.current = hookResult;

  if (prevHookResult !== initialHookValue) {
    var notification = getUpdateInfo({
      Component: Component,
      displayName: displayName,
      hookName: hookName,
      prevHook: hookPath ? _get__default['default'](prevHookResult, hookPath) : prevHookResult,
      nextHook: nextHook,
      options: options,
      ownerDataMap: ownerDataMap
    });

    if (notification.reason.hookDifferences) {
      options.notifier(notification);
    }
  }

  return hookResult;
}

function createPatchedComponent(componentsMap, Component, displayName, React, options, ownerDataMap) {
  if (isMemoComponent(Component)) {
    return patchMemoComponent(Component, displayName, React, options, ownerDataMap);
  }

  if (isForwardRefComponent(Component)) {
    return patchForwardRefComponent(Component, displayName, React, options, ownerDataMap);
  }

  if (isReactClassComponent(Component)) {
    return patchClassComponent(Component, displayName, React, options, ownerDataMap);
  }

  return patchFunctionalOrStrComponent(Component, false, displayName, React, options, ownerDataMap);
}

function getPatchedComponent(componentsMap, Component, displayName, React, options, ownerDataMap) {
  if (componentsMap.has(Component)) {
    return componentsMap.get(Component);
  }

  var WDYRPatchedComponent = createPatchedComponent(componentsMap, Component, displayName, React, options, ownerDataMap);
  componentsMap.set(Component, WDYRPatchedComponent);
  return WDYRPatchedComponent;
}

function getIsSupportedComponentType(Comp) {
  if (!Comp) {
    return false;
  }

  if (isMemoComponent(Comp)) {
    return getIsSupportedComponentType(Comp.type);
  }

  if (isForwardRefComponent(Comp)) {
    return getIsSupportedComponentType(Comp.render);
  }

  if (typeof Comp === 'function') {
    return true;
  }
}

var hooksConfig = {
  useState: {
    path: '0'
  },
  useReducer: {
    path: '0'
  },
  useContext: true,
  useMemo: true
};
function whyDidYouRender(React, userOptions) {
  var options = normalizeOptions(userOptions);
  var origCreateElement = React.createElement;
  var origCreateFactory = React.createFactory;
  var origCloneElement = React.cloneElement;
  var componentsMap = new WeakMap();
  var ownerDataMap = new WeakMap();
  var hooksRef = {
    current: []
  };

  function storeOwnerData(element) {
    var OwnerInstance = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner.current;

    if (OwnerInstance) {
      var Component = OwnerInstance.type.ComponentForHooksTracking || OwnerInstance.type;
      var displayName = getDisplayName(Component);
      ownerDataMap.set(element.props, {
        Component: Component,
        displayName: displayName,
        props: OwnerInstance.pendingProps,
        state: OwnerInstance.stateNode != null ? OwnerInstance.stateNode.state : null,
        hooks: hooksRef.current
      });
    }
  } // Intercept assignments to ReactCurrentOwner.current and reset hooksRef


  var currentOwner = null;

  if (React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED) {
    Object.defineProperty(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, 'current', {
      get: function get() {
        return currentOwner;
      },
      set: function set(value) {
        currentOwner = value;
        hooksRef.current = [];
      }
    });
  }

  React.createElement = function (componentNameOrComponent) {
    var isShouldTrack = null;
    var displayName = null;
    var WDYRPatchedComponent = null;

    for (var _len = arguments.length, rest = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      rest[_key - 1] = arguments[_key];
    }

    try {
      isShouldTrack = getIsSupportedComponentType(componentNameOrComponent) && shouldTrack({
        Component: componentNameOrComponent,
        displayName: getDisplayName(componentNameOrComponent),
        React: React,
        options: options
      });

      if (isShouldTrack) {
        displayName = componentNameOrComponent && componentNameOrComponent.whyDidYouRender && componentNameOrComponent.whyDidYouRender.customName || getDisplayName(componentNameOrComponent);
        WDYRPatchedComponent = getPatchedComponent(componentsMap, componentNameOrComponent, displayName, React, options, ownerDataMap);
        var element = origCreateElement.apply(React, [WDYRPatchedComponent].concat(rest));

        if (options.logOwnerReasons) {
          storeOwnerData(element);
        }

        return element;
      }
    } catch (e) {
      options.consoleLog('whyDidYouRender error. Please file a bug at https://github.com/welldone-software/why-did-you-render/issues.', {
        errorInfo: {
          error: e,
          componentNameOrComponent: componentNameOrComponent,
          rest: rest,
          options: options,
          isShouldTrack: isShouldTrack,
          displayName: displayName,
          WDYRPatchedComponent: WDYRPatchedComponent
        }
      });
    }

    return origCreateElement.apply(React, [componentNameOrComponent].concat(rest));
  };

  Object.assign(React.createElement, origCreateElement);

  React.createFactory = function (type) {
    var factory = React.createElement.bind(null, type);
    factory.type = type;
    return factory;
  };

  Object.assign(React.createFactory, origCreateFactory);

  React.cloneElement = function () {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    var element = origCloneElement.apply(React, args);

    if (options.logOwnerReasons) {
      storeOwnerData(element);
    }

    return element;
  };

  Object.assign(React.cloneElement, origCloneElement);

  if (options.trackHooks) {
    var nativeHooks = Object.entries(hooksConfig).map(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 2),
          hookName = _ref3[0],
          hookTrackingConfig = _ref3[1];

      return [React, hookName, hookTrackingConfig];
    });
    var hooksToTrack = [].concat(_toConsumableArray(nativeHooks), _toConsumableArray(options.trackExtraHooks));
    hooksToTrack.forEach(function (_ref4) {
      var _ref5 = _slicedToArray(_ref4, 3),
          hookParent = _ref5[0],
          hookName = _ref5[1],
          _ref5$ = _ref5[2],
          hookTrackingConfig = _ref5$ === void 0 ? {} : _ref5$;

      var originalHook = hookParent[hookName];
      var newHookName = hookName[0].toUpperCase() + hookName.slice(1);

      var newHook = function newHook() {
        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
          args[_key3] = arguments[_key3];
        }

        var hookResult = originalHook.call.apply(originalHook, [this].concat(args));
        trackHookChanges(hookName, hookTrackingConfig, hookResult, React, options, ownerDataMap, hooksRef);
        return hookResult;
      };

      Object.defineProperty(newHook, 'name', {
        value: newHookName,
        writable: false
      });
      Object.assign(newHook, {
        originalHook: originalHook
      });
      hookParent[hookName] = newHook;
    });
  }

  React.__REVERT_WHY_DID_YOU_RENDER__ = function () {
    Object.assign(React, {
      createElement: origCreateElement,
      createFactory: origCreateFactory,
      cloneElement: origCloneElement
    });
    componentsMap = null;
    var hooksToRevert = [].concat(_toConsumableArray(Object.keys(hooksConfig).map(function (hookName) {
      return [React, hookName];
    })), _toConsumableArray(options.trackExtraHooks));
    hooksToRevert.forEach(function (_ref6) {
      var _ref7 = _slicedToArray(_ref6, 2),
          hookParent = _ref7[0],
          hookName = _ref7[1];

      if (hookParent[hookName].originalHook) {
        hookParent[hookName] = hookParent[hookName].originalHook;
      }
    });
    delete React.__REVERT_WHY_DID_YOU_RENDER__;
  };

  return React;
}

whyDidYouRender.defaultNotifier = defaultNotifier;

module.exports = whyDidYouRender;
