{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/common/Elements/MultiAnsChoicesImages.js\";\n\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { useState, useMemo, useEffect } from 'react';\nimport Button from './Button';\n/** renders a single choice component:\n * PARTS:\n *  - Choice -> input radio;\n *  - Button (submit);\n *\n * STYLE SECTIONS:\n *  - Radio\n *  - Button\n */\n\nexport const ANSWER_VALUE = {\n  CORRECT: '[CORRECT]',\n  WRONG: '[WRONG]'\n};\nconst base = css`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  margin: 5px;\n  > div {\n    margin-bottom: 1rem;\n    display: grid;\n    grid-gap: 2px;\n    grid-template-columns: repeat(2, 1fr);\n    grid-auto-rows: 1fr;\n  }\n`;\nconst labelImg = css`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: 1px solid #000;\n\n  input[type='checkbox'] {\n    position: absolute;\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n\n  img {\n    width: 100%;\n  }\n\n  [type='checkbox']:checked ~ span {\n    display: block;\n  }\n`;\nconst span = css`\n  position: absolute;\n  display: none;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: 2px solid #f00;\n`;\n\nconst noop = () => {};\n\nfunction MultiAnsChoicesImages({\n  name,\n  answers,\n  withSubmit,\n  style,\n  onSubmit = noop,\n  initialValue = []\n}) {\n  const [selectedAnswers, setSelectedAnswers] = useState(initialValue);\n  const correctAnswers = useMemo(() => answers.filter(answer => answer.value === ANSWER_VALUE.CORRECT).map(answer => answer.id).sort(), [answers]);\n  const isCorrect = useMemo(() => {\n    const correctLength = correctAnswers.length === selectedAnswers.length;\n    const allCorrect = selectedAnswers.sort().every((answerId, index) => answerId === correctAnswers[index]);\n    return correctLength && allCorrect ? ANSWER_VALUE.CORRECT : ANSWER_VALUE.WRONG;\n  }, [correctAnswers, selectedAnswers]);\n\n  const handleSelected = event => {\n    // updated selectedAnswers according to user input\n    const {\n      id\n    } = event.target;\n    setSelectedAnswers(event.target.checked ? [...selectedAnswers, id] : selectedAnswers.filter(answerId => answerId !== id));\n  };\n\n  useEffect(() => {\n    if (!withSubmit && correctAnswers.length === selectedAnswers.length) {\n      onSubmit(isCorrect, answers.filter(answer => selectedAnswers.includes(answer.id)));\n    }\n  }, [withSubmit, onSubmit, isCorrect, correctAnswers, answers, selectedAnswers]);\n  return jsx(\"div\", {\n    css: [base, style],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, answers.map(({\n    id,\n    imgURL,\n    alt\n  }) => jsx(\"label\", {\n    key: id,\n    css: labelImg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }, jsx(\"input\", {\n    type: \"checkbox\",\n    id: id,\n    name: name,\n    selected: selectedAnswers.find(answerId => answerId === id),\n    onChange: handleSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }), jsx(\"img\", {\n    src: imgURL,\n    alt: alt || 'Alt',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), jsx(\"span\", {\n    css: [span, style['Outline']],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }\n  })))), withSubmit && jsx(Button, {\n    disabled: !(selectedAnswers.length > 0),\n    onClick: () => onSubmit(isCorrect, answers.filter(answer => selectedAnswers.includes(answer.id))),\n    style: style && style.Button,\n    text: \"Conferma\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default MultiAnsChoicesImages;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/common/Elements/MultiAnsChoicesImages.js"],"names":["css","jsx","useState","useMemo","useEffect","Button","ANSWER_VALUE","CORRECT","WRONG","base","labelImg","span","noop","MultiAnsChoicesImages","name","answers","withSubmit","style","onSubmit","initialValue","selectedAnswers","setSelectedAnswers","correctAnswers","filter","answer","value","map","id","sort","isCorrect","correctLength","length","allCorrect","every","answerId","index","handleSelected","event","target","checked","includes","imgURL","alt","find"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { useState, useMemo, useEffect } from 'react';\nimport Button from './Button';\n\n/** renders a single choice component:\n * PARTS:\n *  - Choice -> input radio;\n *  - Button (submit);\n *\n * STYLE SECTIONS:\n *  - Radio\n *  - Button\n */\n\nexport const ANSWER_VALUE = {\n  CORRECT: '[CORRECT]',\n  WRONG: '[WRONG]',\n};\n\nconst base = css`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  margin: 5px;\n  > div {\n    margin-bottom: 1rem;\n    display: grid;\n    grid-gap: 2px;\n    grid-template-columns: repeat(2, 1fr);\n    grid-auto-rows: 1fr;\n  }\n`;\n\nconst labelImg = css`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: 1px solid #000;\n\n  input[type='checkbox'] {\n    position: absolute;\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n\n  img {\n    width: 100%;\n  }\n\n  [type='checkbox']:checked ~ span {\n    display: block;\n  }\n`;\n\nconst span = css`\n  position: absolute;\n  display: none;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  border: 2px solid #f00;\n`;\n\nconst noop = () => {};\n\nfunction MultiAnsChoicesImages({\n  name,\n  answers,\n  withSubmit,\n  style,\n  onSubmit = noop,\n  initialValue = [],\n}) {\n  const [selectedAnswers, setSelectedAnswers] = useState(initialValue);\n\n  const correctAnswers = useMemo(\n    () =>\n      answers\n        .filter(answer => answer.value === ANSWER_VALUE.CORRECT)\n        .map(answer => answer.id)\n        .sort(),\n    [answers]\n  );\n\n  const isCorrect = useMemo(() => {\n    const correctLength = correctAnswers.length === selectedAnswers.length;\n    const allCorrect = selectedAnswers\n      .sort()\n      .every((answerId, index) => answerId === correctAnswers[index]);\n\n    return correctLength && allCorrect ? ANSWER_VALUE.CORRECT : ANSWER_VALUE.WRONG;\n  }, [correctAnswers, selectedAnswers]);\n\n  const handleSelected = event => {\n    // updated selectedAnswers according to user input\n    const { id } = event.target;\n    setSelectedAnswers(\n      event.target.checked\n        ? [...selectedAnswers, id]\n        : selectedAnswers.filter(answerId => answerId !== id)\n    );\n  };\n\n  useEffect(() => {\n    if (!withSubmit && correctAnswers.length === selectedAnswers.length) {\n      onSubmit(\n        isCorrect,\n        answers.filter(answer => selectedAnswers.includes(answer.id))\n      );\n    }\n  }, [withSubmit, onSubmit, isCorrect, correctAnswers, answers, selectedAnswers]);\n  return (\n    <div css={[base, style]}>\n      <div>\n        {answers.map(({ id, imgURL, alt }) => (\n          <label key={id} css={labelImg}>\n            <input\n              type=\"checkbox\"\n              id={id}\n              name={name}\n              selected={selectedAnswers.find(answerId => answerId === id)}\n              onChange={handleSelected}\n            />\n            <img src={imgURL} alt={alt || 'Alt'} />\n            <span css={[span, style['Outline']]}></span>\n          </label>\n        ))}\n      </div>\n\n      {withSubmit && (\n        <Button\n          disabled={!(selectedAnswers.length > 0)}\n          onClick={() =>\n            onSubmit(\n              isCorrect,\n              answers.filter(answer => selectedAnswers.includes(answer.id))\n            )\n          }\n          style={style && style.Button}\n          text=\"Conferma\"\n        />\n      )}\n    </div>\n  );\n}\nexport default MultiAnsChoicesImages;\n"]},"metadata":{},"sourceType":"module"}