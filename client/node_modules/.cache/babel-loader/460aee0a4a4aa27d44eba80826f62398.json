{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Player/index.js\";\n\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { useEffect, useMemo, useState, Fragment } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport shortid from 'shortid';\nimport axios, { useQuery } from '../common/shared';\nimport { SERVER_URL } from '../common/constants';\nimport * as Elements from '../common/Elements';\nimport Chat from './components/Chat';\nimport PlayerLobby from './components/PlayerLobby';\nimport { addResponseMessage } from '../common/ChatWidget';\nimport * as ROUTES from '../routes';\nimport io from 'socket.io-client'; // `Story` param is an object that stores properties needed for computing\n// storyProps for this specific component\n\nconst createStoryProps = (component, storyRuntime) => {\n  const {\n    id,\n    name,\n    story: storyProps\n  } = component;\n\n  switch (name) {\n    case 'Button':\n    case 'ButtonImage':\n      // Button and ButtonImage have 1 story related prop: onClick\n      return {\n        onClick: () => storyRuntime.moveTo(storyProps.nextNode)\n      };\n\n    case 'SingleAnsChoices':\n    case 'MultiAnsChoices':\n    case 'SingleAnsChoicesImages':\n    case 'MultiAnsChoicesImages':\n      // if more than one answer, we sum all point values\n      return {\n        onSubmit: (isCorrect, selectedAnswers) => {\n          const nextNode = storyProps.nextNode[isCorrect];\n          storyRuntime.moveTo(nextNode);\n          storyRuntime.updateStats({\n            id,\n            name,\n            data: selectedAnswers\n          });\n          storyRuntime.updateScore(selectedAnswers.reduce((points, answer) => points + (Number(answer.points) || 0), 0));\n        }\n      };\n\n    case 'Camera':\n      return {\n        onSendPhoto: pic => {\n          storyRuntime.moveTo(storyProps.nextNode);\n          storyRuntime.updateStats({\n            id,\n            name,\n            data: pic\n          });\n        }\n      };\n\n    case 'Input':\n    case 'TextArea':\n      return {\n        onSubmit: answer => {\n          storyRuntime.moveTo(storyProps.nextNode);\n          storyRuntime.updateStats({\n            id,\n            name,\n            data: answer\n          });\n        }\n      };\n\n    case 'Points':\n      return {\n        points: storyRuntime.score\n      };\n\n    default:\n      throw new Error(`Cannot compute story props for ${name} because this component does not exist.`);\n  }\n}; // create component tree\n\n\nconst buildViewContent = (components, storyRuntime) => components.map(component => {\n  const {\n    story,\n    children,\n    ...rest\n  } = component;\n  const storyProps = story ? createStoryProps(component, storyRuntime) : {}; // compound components must keep their \"atoms\" in children prop, or we can't\n  // know what to load (i.e. what is a prop and what is a renderable component)\n\n  const props = { ...storyProps,\n    ...rest,\n    children: children && buildViewContent(children, storyRuntime)\n  };\n  const Element = Elements[component.name];\n  return jsx(Element, Object.assign({\n    key: component.id\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 12\n    }\n  }));\n});\n\nconst Player = () => {\n  const {\n    storyId\n  } = useQuery(); // IDs for who I am (ids.player) and who evaluates me (ids.evaluator)\n\n  const [ids, setIds] = useState({\n    player: '',\n    evaluator: ''\n  });\n  const [story, setStory] = useState(null); // for waiting for story fetch\n\n  const [status, setStatus] = useState('LOADING'); // components for this page\n\n  const [viewContent, setViewContent] = useState(null); // current position in story\n\n  const [currentNodeId, setCurrentNodeId] = useState(null); // point total\n\n  const [score, setScore] = useState(0);\n  const [forceUpdate, setForceUpdate] = useState(shortid.generate());\n  const socket = useMemo(() => {\n    const tmp = io(SERVER_URL, {\n      query: {\n        type: 'player',\n        storyId\n      }\n    }); // Once the connection is established the socket id became the player id\n\n    tmp.on('connect', () => setIds({\n      player: tmp.id,\n      evaluator: `evaluator${storyId}`\n    }));\n    return tmp;\n  }, [storyId]);\n  /* =========================== SOCKET STUFF ======================== */\n\n  useEffect(() => {\n    socket.on('chat-msg-recv', payload => {\n      const {\n        player,\n        evaluator\n      } = ids;\n      const {\n        story,\n        senderId,\n        receiverId,\n        msg\n      } = payload;\n      if (story === storyId && senderId === evaluator && receiverId === player) addResponseMessage(msg);\n    });\n    return () => socket.removeListener('chat-msg-recv');\n  }, [socket, storyId, ids]);\n  useEffect(() => {\n    const onEvalPts = payload => {\n      const {\n        story,\n        senderId,\n        receiverId,\n        points\n      } = payload;\n\n      if (story === storyId && senderId === ids.evaluator && receiverId === ids.player) {\n        setScore(score => score + points);\n      }\n    };\n\n    socket.on('eval-pts', onEvalPts);\n    return () => socket.removeListener('eval-pts', onEvalPts);\n  }, [socket, storyId, ids]);\n\n  const handleSend = msg => socket.emit('chat-msg-send', {\n    story: storyId,\n    senderId: ids.player,\n    receiverId: ids.evaluator,\n    msg\n  });\n  /* ============================ STORY STUFF ========================== */\n  // Story fetching when story is set\n\n\n  useEffect(() => {\n    const fetchStory = async () => {\n      try {\n        const res = await axios.get(`stories/${storyId}`);\n        const newStory = res.data.payload;\n        document.title = newStory.title || document.title;\n        setStory(newStory);\n      } catch (err) {\n        console.error(err);\n        setStatus('FAILURE');\n      }\n    };\n\n    fetchStory();\n  }, [storyId]); // story runtime provides functions and data for accessing stories and story props\n\n  const storyRuntime = useMemo(() => ({\n    currentNodeId,\n    score,\n    // Whenever position changes evaluator is updated\n    moveTo: node => {\n      //If the node is final the player is marked as completed\n      if (story !== null && story.nodes.find(iter => iter.id === node && iter.isFinal)) {\n        socket.emit('update:eval', {\n          story: storyId,\n          playerId: ids.player,\n          patch: {\n            hasFinished: true\n          }\n        });\n      }\n\n      socket.emit('update:position', {\n        story: storyId,\n        senderId: ids.player,\n        receiverId: ids.evaluator,\n        payload: {\n          activityNodeId: currentNodeId\n        }\n      });\n      setCurrentNodeId(node);\n      setForceUpdate(shortid.generate());\n    },\n    updateStats: payload => {\n      socket.emit('update:stats', {\n        story: storyId,\n        nodeId: currentNodeId,\n        senderId: ids.player,\n        receiverId: ids.evaluator,\n        payload\n      });\n    },\n    updateScore: points => {\n      setScore(score => score + points);\n      socket.emit('update:score', {\n        story: storyId,\n        senderId: ids.player,\n        receiverId: ids.evaluator,\n        payload: {\n          score\n        }\n      });\n    }\n  }), [socket, currentNodeId, ids, score, storyId, story]); // load components for this position whenever position changes\n\n  useEffect(() => {\n    if (currentNodeId != null) {\n      const {\n        components\n      } = story.nodes.find(node => node.id === currentNodeId);\n      const content = buildViewContent(components, storyRuntime);\n      setViewContent(content);\n    }\n  }, [currentNodeId, story, storyRuntime]);\n\n  if (status === 'LOADING') {\n    const saveChanges = patch => socket.emit('update:eval', {\n      story: storyId,\n      playerId: ids.player,\n      patch\n    });\n\n    return jsx(PlayerLobby, {\n      story: story,\n      onStart: node => {\n        setStatus('SUCCESS');\n        setCurrentNodeId(node.id);\n      },\n      saveChanges: saveChanges,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 7\n      }\n    });\n  }\n\n  if (status === 'FAILURE') {\n    return jsx(Redirect, {\n      to: ROUTES.NOTFOUND,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 12\n      }\n    });\n  }\n\n  return jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 5\n    }\n  }, jsx(\"div\", {\n    key: forceUpdate,\n    css: css`\n          width: 100vw;\n          height: 100vh;\n          overflow-y: auto;\n          padding: 10px;\n          animation-name: fade;\n          animation-duration: 2200ms;\n\n          @keyframes fade {\n            0% {\n              opacity: 0;\n            }\n            100% {\n              opacity: 1;\n            }\n          }\n        `,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }\n  }, viewContent), jsx(Chat, {\n    onSend: handleSend,\n    socket: socket,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Player;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Player/index.js"],"names":["css","jsx","useEffect","useMemo","useState","Fragment","Redirect","shortid","axios","useQuery","SERVER_URL","Elements","Chat","PlayerLobby","addResponseMessage","ROUTES","io","createStoryProps","component","storyRuntime","id","name","story","storyProps","onClick","moveTo","nextNode","onSubmit","isCorrect","selectedAnswers","updateStats","data","updateScore","reduce","points","answer","Number","onSendPhoto","pic","score","Error","buildViewContent","components","map","children","rest","props","Element","Player","storyId","ids","setIds","player","evaluator","setStory","status","setStatus","viewContent","setViewContent","currentNodeId","setCurrentNodeId","setScore","forceUpdate","setForceUpdate","generate","socket","tmp","query","type","on","payload","senderId","receiverId","msg","removeListener","onEvalPts","handleSend","emit","fetchStory","res","get","newStory","document","title","err","console","error","node","nodes","find","iter","isFinal","playerId","patch","hasFinished","activityNodeId","nodeId","content","saveChanges","NOTFOUND"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { useEffect, useMemo, useState, Fragment } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport shortid from 'shortid';\n\nimport axios, { useQuery } from '../common/shared';\nimport { SERVER_URL } from '../common/constants';\n\nimport * as Elements from '../common/Elements';\nimport Chat from './components/Chat';\nimport PlayerLobby from './components/PlayerLobby';\nimport { addResponseMessage } from '../common/ChatWidget';\nimport * as ROUTES from '../routes';\n\nimport io from 'socket.io-client';\n\n// `Story` param is an object that stores properties needed for computing\n// storyProps for this specific component\nconst createStoryProps = (component, storyRuntime) => {\n  const { id, name, story: storyProps } = component;\n\n  switch (name) {\n    case 'Button':\n    case 'ButtonImage':\n      // Button and ButtonImage have 1 story related prop: onClick\n      return {\n        onClick: () => storyRuntime.moveTo(storyProps.nextNode),\n      };\n    case 'SingleAnsChoices':\n    case 'MultiAnsChoices':\n    case 'SingleAnsChoicesImages':\n    case 'MultiAnsChoicesImages':\n      // if more than one answer, we sum all point values\n      return {\n        onSubmit: (isCorrect, selectedAnswers) => {\n          const nextNode = storyProps.nextNode[isCorrect];\n          storyRuntime.moveTo(nextNode);\n          storyRuntime.updateStats({ id, name, data: selectedAnswers });\n          storyRuntime.updateScore(\n            selectedAnswers.reduce(\n              (points, answer) => points + (Number(answer.points) || 0),\n              0\n            )\n          );\n        },\n      };\n    case 'Camera':\n      return {\n        onSendPhoto: pic => {\n          storyRuntime.moveTo(storyProps.nextNode);\n          storyRuntime.updateStats({ id, name, data: pic });\n        },\n      };\n    case 'Input':\n    case 'TextArea':\n      return {\n        onSubmit: answer => {\n          storyRuntime.moveTo(storyProps.nextNode);\n          storyRuntime.updateStats({ id, name, data: answer });\n        },\n      };\n    case 'Points':\n      return {\n        points: storyRuntime.score,\n      };\n    default:\n      throw new Error(\n        `Cannot compute story props for ${name} because this component does not exist.`\n      );\n  }\n};\n\n// create component tree\nconst buildViewContent = (components, storyRuntime) =>\n  components.map(component => {\n    const { story, children, ...rest } = component;\n    const storyProps = story ? createStoryProps(component, storyRuntime) : {};\n    // compound components must keep their \"atoms\" in children prop, or we can't\n    // know what to load (i.e. what is a prop and what is a renderable component)\n    const props = {\n      ...storyProps,\n      ...rest,\n      children: children && buildViewContent(children, storyRuntime),\n    };\n    const Element = Elements[component.name];\n    return <Element key={component.id} {...props} />;\n  });\n\nconst Player = () => {\n  const { storyId } = useQuery();\n  // IDs for who I am (ids.player) and who evaluates me (ids.evaluator)\n  const [ids, setIds] = useState({\n    player: '',\n    evaluator: '',\n  });\n  const [story, setStory] = useState(null);\n  // for waiting for story fetch\n  const [status, setStatus] = useState('LOADING');\n  // components for this page\n  const [viewContent, setViewContent] = useState(null);\n  // current position in story\n  const [currentNodeId, setCurrentNodeId] = useState(null);\n  // point total\n  const [score, setScore] = useState(0);\n\n  const [forceUpdate, setForceUpdate] = useState(shortid.generate());\n\n  const socket = useMemo(() => {\n    const tmp = io(SERVER_URL, { query: { type: 'player', storyId } });\n    // Once the connection is established the socket id became the player id\n    tmp.on('connect', () => setIds({ player: tmp.id, evaluator: `evaluator${storyId}` }));\n    return tmp;\n  }, [storyId]);\n\n  /* =========================== SOCKET STUFF ======================== */\n  useEffect(() => {\n    socket.on('chat-msg-recv', payload => {\n      const { player, evaluator } = ids;\n      const { story, senderId, receiverId, msg } = payload;\n      if (story === storyId && senderId === evaluator && receiverId === player)\n        addResponseMessage(msg);\n    });\n\n    return () => socket.removeListener('chat-msg-recv');\n  }, [socket, storyId, ids]);\n\n  useEffect(() => {\n    const onEvalPts = payload => {\n      const { story, senderId, receiverId, points } = payload;\n      if (story === storyId && senderId === ids.evaluator && receiverId === ids.player) {\n        setScore(score => score + points);\n      }\n    };\n\n    socket.on('eval-pts', onEvalPts);\n    return () => socket.removeListener('eval-pts', onEvalPts);\n  }, [socket, storyId, ids]);\n\n  const handleSend = msg =>\n    socket.emit('chat-msg-send', {\n      story: storyId,\n      senderId: ids.player,\n      receiverId: ids.evaluator,\n      msg,\n    });\n\n  /* ============================ STORY STUFF ========================== */\n  // Story fetching when story is set\n  useEffect(() => {\n    const fetchStory = async () => {\n      try {\n        const res = await axios.get(`stories/${storyId}`);\n        const newStory = res.data.payload;\n        document.title = newStory.title || document.title;\n        setStory(newStory);\n      } catch (err) {\n        console.error(err);\n        setStatus('FAILURE');\n      }\n    };\n\n    fetchStory();\n  }, [storyId]);\n\n  // story runtime provides functions and data for accessing stories and story props\n  const storyRuntime = useMemo(\n    () => ({\n      currentNodeId,\n      score,\n      // Whenever position changes evaluator is updated\n      moveTo: node => {\n        //If the node is final the player is marked as completed\n        if (\n          story !== null &&\n          story.nodes.find(iter => iter.id === node && iter.isFinal)\n        ) {\n          socket.emit('update:eval', {\n            story: storyId,\n            playerId: ids.player,\n            patch: { hasFinished: true },\n          });\n        }\n\n        socket.emit('update:position', {\n          story: storyId,\n          senderId: ids.player,\n          receiverId: ids.evaluator,\n          payload: { activityNodeId: currentNodeId },\n        });\n        setCurrentNodeId(node);\n        setForceUpdate(shortid.generate());\n      },\n      updateStats: payload => {\n        socket.emit('update:stats', {\n          story: storyId,\n          nodeId: currentNodeId,\n          senderId: ids.player,\n          receiverId: ids.evaluator,\n          payload,\n        });\n      },\n      updateScore: points => {\n        setScore(score => score + points);\n        socket.emit('update:score', {\n          story: storyId,\n          senderId: ids.player,\n          receiverId: ids.evaluator,\n          payload: { score },\n        });\n      },\n    }),\n    [socket, currentNodeId, ids, score, storyId, story]\n  );\n\n  // load components for this position whenever position changes\n  useEffect(() => {\n    if (currentNodeId != null) {\n      const { components } = story.nodes.find(node => node.id === currentNodeId);\n      const content = buildViewContent(components, storyRuntime);\n      setViewContent(content);\n    }\n  }, [currentNodeId, story, storyRuntime]);\n\n  if (status === 'LOADING') {\n    const saveChanges = patch =>\n      socket.emit('update:eval', { story: storyId, playerId: ids.player, patch });\n\n    return (\n      <PlayerLobby\n        story={story}\n        onStart={node => {\n          setStatus('SUCCESS');\n          setCurrentNodeId(node.id);\n        }}\n        saveChanges={saveChanges}\n      />\n    );\n  }\n\n  if (status === 'FAILURE') {\n    return <Redirect to={ROUTES.NOTFOUND} />;\n  }\n\n  return (\n    <Fragment>\n      <div\n        key={forceUpdate}\n        css={css`\n          width: 100vw;\n          height: 100vh;\n          overflow-y: auto;\n          padding: 10px;\n          animation-name: fade;\n          animation-duration: 2200ms;\n\n          @keyframes fade {\n            0% {\n              opacity: 0;\n            }\n            100% {\n              opacity: 1;\n            }\n          }\n        `}\n      >\n        {viewContent}\n      </div>\n      <Chat onSend={handleSend} socket={socket} />\n    </Fragment>\n  );\n};\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}