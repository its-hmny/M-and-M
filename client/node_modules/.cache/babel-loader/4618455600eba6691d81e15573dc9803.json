{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/CheckboxFragment.js\";\nimport React from 'react';\nimport { useEditor } from '../../context/EditorContext';\nimport { Checkbox, FormControlLabel } from '@material-ui/core';\n/*\n  truthValues = [TrueValue, FalseValue]\n*/\n\nconst CheckboxFragment = ({\n  classNames,\n  path,\n  fragmentSpecificProps\n}) => {\n  const {\n    pathAlternative,\n    valToChange,\n    label,\n    onChange,\n    truthValues\n  } = fragmentSpecificProps;\n  const {\n    getFromPath,\n    setPathToValue\n  } = useEditor();\n  path = pathAlternative ? path.concat(pathAlternative || []) : path || [];\n  const value = getFromPath(path)[valToChange];\n  return /*#__PURE__*/React.createElement(FormControlLabel, {\n    className: classNames.InspectorElement,\n    control: /*#__PURE__*/React.createElement(Checkbox, {\n      color: \"primary\",\n      checked: value === (truthValues !== undefined ? truthValues[0] : true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    }),\n    onChange: event => onChange !== undefined ? onChange(event) : setPathToValue(path, valToChange, event.target.checked ? truthValues !== undefined ? truthValues[0] : true : truthValues !== undefined ? truthValues[1] : false),\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default CheckboxFragment;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/CheckboxFragment.js"],"names":["React","useEditor","Checkbox","FormControlLabel","CheckboxFragment","classNames","path","fragmentSpecificProps","pathAlternative","valToChange","label","onChange","truthValues","getFromPath","setPathToValue","concat","value","InspectorElement","undefined","event","target","checked"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,QAAT,EAAmBC,gBAAnB,QAA2C,mBAA3C;AAEA;AACA;AACA;;AAEA,MAAMC,gBAAgB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA;AAApB,CAAD,KAAiD;AACxE,QAAM;AACJC,IAAAA,eADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA;AALI,MAMFL,qBANJ;AAOA,QAAM;AAAEM,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCb,SAAS,EAAjD;AACAK,EAAAA,IAAI,GAAGE,eAAe,GAAGF,IAAI,CAACS,MAAL,CAAYP,eAAe,IAAI,EAA/B,CAAH,GAAwCF,IAAI,IAAI,EAAtE;AACA,QAAMU,KAAK,GAAGH,WAAW,CAACP,IAAD,CAAX,CAAkBG,WAAlB,CAAd;AAEA,sBACE,oBAAC,gBAAD;AACE,IAAA,SAAS,EAAEJ,UAAU,CAACY,gBADxB;AAEE,IAAA,OAAO,eACL,oBAAC,QAAD;AACE,MAAA,KAAK,EAAC,SADR;AAEE,MAAA,OAAO,EAAED,KAAK,MAAMJ,WAAW,KAAKM,SAAhB,GAA4BN,WAAW,CAAC,CAAD,CAAvC,GAA6C,IAAnD,CAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ;AAQE,IAAA,QAAQ,EAAEO,KAAK,IACbR,QAAQ,KAAKO,SAAb,GACIP,QAAQ,CAACQ,KAAD,CADZ,GAEIL,cAAc,CACZR,IADY,EAEZG,WAFY,EAGZU,KAAK,CAACC,MAAN,CAAaC,OAAb,GACIT,WAAW,KAAKM,SAAhB,GACEN,WAAW,CAAC,CAAD,CADb,GAEE,IAHN,GAIIA,WAAW,KAAKM,SAAhB,GACAN,WAAW,CAAC,CAAD,CADX,GAEA,KATQ,CAXtB;AAuBE,IAAA,KAAK,EAAEF,KAvBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AA2BD,CAvCD;;AAyCA,eAAeN,gBAAf","sourcesContent":["import React from 'react';\nimport { useEditor } from '../../context/EditorContext';\nimport { Checkbox, FormControlLabel } from '@material-ui/core';\n\n/*\n  truthValues = [TrueValue, FalseValue]\n*/\n\nconst CheckboxFragment = ({ classNames, path, fragmentSpecificProps }) => {\n  const {\n    pathAlternative,\n    valToChange,\n    label,\n    onChange,\n    truthValues,\n  } = fragmentSpecificProps;\n  const { getFromPath, setPathToValue } = useEditor();\n  path = pathAlternative ? path.concat(pathAlternative || []) : path || [];\n  const value = getFromPath(path)[valToChange];\n\n  return (\n    <FormControlLabel\n      className={classNames.InspectorElement}\n      control={\n        <Checkbox\n          color=\"primary\"\n          checked={value === (truthValues !== undefined ? truthValues[0] : true)}\n        />\n      }\n      onChange={event =>\n        onChange !== undefined\n          ? onChange(event)\n          : setPathToValue(\n              path,\n              valToChange,\n              event.target.checked\n                ? truthValues !== undefined\n                  ? truthValues[0]\n                  : true\n                : truthValues !== undefined\n                ? truthValues[1]\n                : false\n            )\n      }\n      label={label}\n    />\n  );\n};\n\nexport default CheckboxFragment;\n"]},"metadata":{},"sourceType":"module"}