{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/common/Elements/SingleAnsChoicesImages.js\";\n\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { useState, useMemo, useEffect } from 'react';\nimport Button from './Button';\n/** renders a single choice component:\n * PARTS:\n *  - Choice -> input radio;\n *  - Button (submit);\n *\n * STYLE SECTIONS:\n *  - Radio\n *  - Button\n */\n\nexport const ANSWER_VALUE = {\n  CORRECT: '[CORRECT]',\n  WRONG: '[WRONG]'\n};\nconst base = css`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  margin: 5px;\n  > div {\n    margin-bottom: 1rem;\n    display: grid;\n    grid-gap: 5px;\n    grid-template-columns: repeat(2, 1fr);\n    grid-auto-rows: 1fr;\n  }\n`;\nconst labelImg = css`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: 1px solid #000;\n\n  span {\n    position: absolute;\n    display: none;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: 2px solid #f00;\n  }\n\n  input[type='radio'] {\n    position: absolute;\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n\n  img {\n    width: 100%;\n  }\n\n  [type='radio']:checked ~ span {\n    display: block;\n  }\n`;\n\nconst noop = () => {};\n\nfunction SingleAnsChoicesImages({\n  name,\n  answers,\n  withSubmit,\n  style,\n  onSubmit = noop,\n  initialValue = null\n}) {\n  const [selectedAnswer, setSelectedAnswer] = useState(initialValue); //let's only work with IDs\n\n  const correctAnswer = useMemo(() => answers.filter(answer => answer.value === ANSWER_VALUE.CORRECT).map(answer => answer.id).sort(), [answers]);\n  const isCorrect = useMemo(() => {\n    // if an answer is selected AND is correct, return correct\n    // Uses == instead === because for some reason type(selectedAnswer) != type(correctAnswer)\n    // so a conversion is needed\n    return selectedAnswer && selectedAnswer === correctAnswer[0] ? ANSWER_VALUE.CORRECT : ANSWER_VALUE.WRONG;\n  }, [correctAnswer, selectedAnswer]);\n\n  const handleSelected = event => {\n    // since it's radio button, selected answer is only one.\n    const {\n      id\n    } = event.target;\n    setSelectedAnswer(id);\n  };\n\n  useEffect(() => {\n    if (!withSubmit && selectedAnswer) {\n      onSubmit(isCorrect, [answers.find(answer => answer.id === selectedAnswer)]);\n    }\n  }, [withSubmit, onSubmit, isCorrect, answers, selectedAnswer]);\n  console.log(answers);\n  return jsx(\"div\", {\n    css: [base, style],\n    style: style['Root'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, answers.map(({\n    id,\n    imgURL,\n    alt\n  }) => jsx(\"label\", {\n    key: id,\n    css: labelImg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, jsx(\"input\", {\n    type: \"radio\",\n    id: id,\n    name: name,\n    checked: id === selectedAnswer,\n    onChange: handleSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }), jsx(\"img\", {\n    src: imgURL,\n    style: base && style['Image'],\n    alt: alt || 'Alt',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  }), jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  })))), withSubmit && jsx(Button, {\n    disabled: selectedAnswer === null,\n    onClick: () => onSubmit(isCorrect, [answers.find(answer => answer.id === selectedAnswer)]),\n    style: style && style.Button,\n    text: \"Conferma\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default SingleAnsChoicesImages;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/common/Elements/SingleAnsChoicesImages.js"],"names":["css","jsx","useState","useMemo","useEffect","Button","ANSWER_VALUE","CORRECT","WRONG","base","labelImg","noop","SingleAnsChoicesImages","name","answers","withSubmit","style","onSubmit","initialValue","selectedAnswer","setSelectedAnswer","correctAnswer","filter","answer","value","map","id","sort","isCorrect","handleSelected","event","target","find","console","log","imgURL","alt"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { useState, useMemo, useEffect } from 'react';\nimport Button from './Button';\n\n/** renders a single choice component:\n * PARTS:\n *  - Choice -> input radio;\n *  - Button (submit);\n *\n * STYLE SECTIONS:\n *  - Radio\n *  - Button\n */\n\nexport const ANSWER_VALUE = {\n  CORRECT: '[CORRECT]',\n  WRONG: '[WRONG]',\n};\n\nconst base = css`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  margin: 5px;\n  > div {\n    margin-bottom: 1rem;\n    display: grid;\n    grid-gap: 5px;\n    grid-template-columns: repeat(2, 1fr);\n    grid-auto-rows: 1fr;\n  }\n`;\n\nconst labelImg = css`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  cursor: pointer;\n  border: 1px solid #000;\n\n  span {\n    position: absolute;\n    display: none;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    border: 2px solid #f00;\n  }\n\n  input[type='radio'] {\n    position: absolute;\n    opacity: 0;\n    width: 0;\n    height: 0;\n  }\n\n  img {\n    width: 100%;\n  }\n\n  [type='radio']:checked ~ span {\n    display: block;\n  }\n`;\n\nconst noop = () => {};\n\nfunction SingleAnsChoicesImages({\n  name,\n  answers,\n  withSubmit,\n  style,\n  onSubmit = noop,\n  initialValue = null,\n}) {\n  const [selectedAnswer, setSelectedAnswer] = useState(initialValue);\n\n  //let's only work with IDs\n  const correctAnswer = useMemo(\n    () =>\n      answers\n        .filter(answer => answer.value === ANSWER_VALUE.CORRECT)\n        .map(answer => answer.id)\n        .sort(),\n    [answers]\n  );\n\n  const isCorrect = useMemo(() => {\n    // if an answer is selected AND is correct, return correct\n    // Uses == instead === because for some reason type(selectedAnswer) != type(correctAnswer)\n    // so a conversion is needed\n\n    return selectedAnswer && selectedAnswer === correctAnswer[0]\n      ? ANSWER_VALUE.CORRECT\n      : ANSWER_VALUE.WRONG;\n  }, [correctAnswer, selectedAnswer]);\n\n  const handleSelected = event => {\n    // since it's radio button, selected answer is only one.\n    const { id } = event.target;\n    setSelectedAnswer(id);\n  };\n\n  useEffect(() => {\n    if (!withSubmit && selectedAnswer) {\n      onSubmit(isCorrect, [answers.find(answer => answer.id === selectedAnswer)]);\n    }\n  }, [withSubmit, onSubmit, isCorrect, answers, selectedAnswer]);\n  console.log(answers);\n  return (\n    <div css={[base, style]} style={style['Root']}>\n      <div>\n        {answers.map(({ id, imgURL, alt }) => (\n          <label key={id} css={labelImg}>\n            <input\n              type=\"radio\"\n              id={id}\n              name={name}\n              checked={id === selectedAnswer}\n              onChange={handleSelected}\n            />\n            <img src={imgURL} style={base && style['Image']} alt={alt || 'Alt'} />\n            <span></span>\n          </label>\n        ))}\n      </div>\n\n      {withSubmit && (\n        <Button\n          disabled={selectedAnswer === null}\n          onClick={() =>\n            onSubmit(isCorrect, [answers.find(answer => answer.id === selectedAnswer)])\n          }\n          style={style && style.Button}\n          text=\"Conferma\"\n        />\n      )}\n    </div>\n  );\n}\nexport default SingleAnsChoicesImages;\n"]},"metadata":{},"sourceType":"module"}