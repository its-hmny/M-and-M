{"ast":null,"code":"import produce from 'immer';\nimport create from 'zustand';\n/* create takes (set, get, api) functions to\n    * set (newState => updates) to update store\n    * get (() => obj) -> read store\n\n    immer gives you a proxy on which to do imperative changes, then switches to the whole\n      state : {\n        field : {\n          ...oldFields,\n          newField : newValue,\n        }\n      }\n*/\n\nconst createStore = config => create((set, get, api) => config(fn => set(produce(fn)), get, api));\n\nexport default createStore;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Creator/stores/createStore.js"],"names":["produce","create","createStore","config","set","get","api","fn"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,OAApB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,WAAW,GAAGC,MAAM,IACxBF,MAAM,CAAC,CAACG,GAAD,EAAMC,GAAN,EAAWC,GAAX,KAAmBH,MAAM,CAACI,EAAE,IAAIH,GAAG,CAACJ,OAAO,CAACO,EAAD,CAAR,CAAV,EAAyBF,GAAzB,EAA8BC,GAA9B,CAA1B,CADR;;AAGA,eAAeJ,WAAf","sourcesContent":["import produce from 'immer';\nimport create from 'zustand';\n\n/* create takes (set, get, api) functions to\n    * set (newState => updates) to update store\n    * get (() => obj) -> read store\n\n    immer gives you a proxy on which to do imperative changes, then switches to the whole\n      state : {\n        field : {\n          ...oldFields,\n          newField : newValue,\n        }\n      }\n*/\nconst createStore = config =>\n  create((set, get, api) => config(fn => set(produce(fn)), get, api));\n\nexport default createStore;\n"]},"metadata":{},"sourceType":"module"}