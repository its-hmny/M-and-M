{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/RadioFragment.js\";\nimport React from 'react';\nimport { useEditor } from '../../context/EditorContext';\nimport { Radio, FormControlLabel } from '@material-ui/core';\n/*\n  truthValues = [TrueValue, FalseValue]\n*/\n\nconst RadioFragment = ({\n  classNames,\n  path,\n  fragmentSpecificProps\n}) => {\n  const {\n    pathAlternative,\n    valToChange,\n    label,\n    onChange,\n    truthValues,\n    name,\n    correctAnswerValue,\n    index\n  } = fragmentSpecificProps;\n  const {\n    setPathToValue\n  } = useEditor();\n  path = pathAlternative ? path.concat(pathAlternative || []) : path || [];\n  return /*#__PURE__*/React.createElement(FormControlLabel, {\n    className: classNames.InspectorElement,\n    control: /*#__PURE__*/React.createElement(Radio, {\n      name: name,\n      value: index,\n      checked: index === correctAnswerValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 16\n      }\n    }),\n    onChange: event => onChange !== undefined ? onChange(event, index, path, truthValues) : setPathToValue(path || [], valToChange, event.target.checked ? truthValues !== undefined ? truthValues[0] : true : truthValues !== undefined ? truthValues[1] : false),\n    label: label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default RadioFragment;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/RadioFragment.js"],"names":["React","useEditor","Radio","FormControlLabel","RadioFragment","classNames","path","fragmentSpecificProps","pathAlternative","valToChange","label","onChange","truthValues","name","correctAnswerValue","index","setPathToValue","concat","InspectorElement","event","undefined","target","checked"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,KAAT,EAAgBC,gBAAhB,QAAwC,mBAAxC;AAEA;AACA;AACA;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA;AAApB,CAAD,KAAiD;AACrE,QAAM;AACJC,IAAAA,eADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,WALI;AAMJC,IAAAA,IANI;AAOJC,IAAAA,kBAPI;AAQJC,IAAAA;AARI,MASFR,qBATJ;AAWA,QAAM;AAAES,IAAAA;AAAF,MAAqBf,SAAS,EAApC;AACAK,EAAAA,IAAI,GAAGE,eAAe,GAAGF,IAAI,CAACW,MAAL,CAAYT,eAAe,IAAI,EAA/B,CAAH,GAAwCF,IAAI,IAAI,EAAtE;AAEA,sBACE,oBAAC,gBAAD;AACE,IAAA,SAAS,EAAED,UAAU,CAACa,gBADxB;AAEE,IAAA,OAAO,eAAE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAEL,IAAb;AAAmB,MAAA,KAAK,EAAEE,KAA1B;AAAiC,MAAA,OAAO,EAAEA,KAAK,KAAKD,kBAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFX;AAGE,IAAA,QAAQ,EAAEK,KAAK,IACbR,QAAQ,KAAKS,SAAb,GACIT,QAAQ,CAACQ,KAAD,EAAQJ,KAAR,EAAeT,IAAf,EAAqBM,WAArB,CADZ,GAEII,cAAc,CACZV,IAAI,IAAI,EADI,EAEZG,WAFY,EAGZU,KAAK,CAACE,MAAN,CAAaC,OAAb,GACIV,WAAW,KAAKQ,SAAhB,GACER,WAAW,CAAC,CAAD,CADb,GAEE,IAHN,GAIIA,WAAW,KAAKQ,SAAhB,GACAR,WAAW,CAAC,CAAD,CADX,GAEA,KATQ,CANtB;AAkBE,IAAA,KAAK,EAAEF,KAlBT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAsBD,CArCD;;AAuCA,eAAeN,aAAf","sourcesContent":["import React from 'react';\nimport { useEditor } from '../../context/EditorContext';\nimport { Radio, FormControlLabel } from '@material-ui/core';\n\n/*\n  truthValues = [TrueValue, FalseValue]\n*/\n\nconst RadioFragment = ({ classNames, path, fragmentSpecificProps }) => {\n  const {\n    pathAlternative,\n    valToChange,\n    label,\n    onChange,\n    truthValues,\n    name,\n    correctAnswerValue,\n    index,\n  } = fragmentSpecificProps;\n\n  const { setPathToValue } = useEditor();\n  path = pathAlternative ? path.concat(pathAlternative || []) : path || [];\n\n  return (\n    <FormControlLabel\n      className={classNames.InspectorElement}\n      control={<Radio name={name} value={index} checked={index === correctAnswerValue} />}\n      onChange={event =>\n        onChange !== undefined\n          ? onChange(event, index, path, truthValues)\n          : setPathToValue(\n              path || [],\n              valToChange,\n              event.target.checked\n                ? truthValues !== undefined\n                  ? truthValues[0]\n                  : true\n                : truthValues !== undefined\n                ? truthValues[1]\n                : false\n            )\n      }\n      label={label}\n    />\n  );\n};\n\nexport default RadioFragment;\n"]},"metadata":{},"sourceType":"module"}