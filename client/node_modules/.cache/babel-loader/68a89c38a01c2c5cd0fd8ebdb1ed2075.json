{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Evaluator/components/ChatWidget.js\";\nimport React, { useEffect } from 'react';\nimport ChatWidget from '../../common/ChatWidget';\nimport { deleteMessages, addResponseMessage, addUserMessage, setBadgeCount } from 'react-chat-widget';\nimport { useEvaluator } from '../context/EvaluatorContext';\n\nconst Chat = ({\n  onOpen,\n  isOpen\n}) => {\n  const {\n    selectedPlayer,\n    storyId,\n    updatePlayerLog,\n    socket\n  } = useEvaluator();\n  const {\n    name,\n    id,\n    avatar,\n    chatLog,\n    unreadMessages\n  } = selectedPlayer || {};\n  useEffect(() => {\n    deleteMessages();\n\n    if (chatLog) {\n      chatLog.forEach(msg => {\n        const {\n          sender,\n          content\n        } = msg;\n        sender === `evaluator${storyId}` ? addUserMessage(content) : addResponseMessage(content);\n      });\n    }\n\n    setBadgeCount(unreadMessages);\n  }, [chatLog, unreadMessages, storyId]);\n\n  const sendHandler = msg => {\n    socket.emit('chat-msg-send', {\n      story: storyId,\n      senderId: `evaluator${storyId}`,\n      receiverId: id,\n      msg\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(ChatWidget, {\n    automaticToggle: false,\n    setOpen: () => {\n      updatePlayerLog(selectedPlayer.id, {\n        unreadMessages: 0\n      });\n      onOpen();\n    },\n    isOpen: isOpen,\n    title: name || id,\n    subtitle: \"Respond to the player's request\",\n    handleNewUserMessage: sendHandler,\n    profileAvatar: avatar || undefined,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default Chat;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Evaluator/components/ChatWidget.js"],"names":["React","useEffect","ChatWidget","deleteMessages","addResponseMessage","addUserMessage","setBadgeCount","useEvaluator","Chat","onOpen","isOpen","selectedPlayer","storyId","updatePlayerLog","socket","name","id","avatar","chatLog","unreadMessages","forEach","msg","sender","content","sendHandler","emit","story","senderId","receiverId","undefined"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SACEC,cADF,EAEEC,kBAFF,EAGEC,cAHF,EAIEC,aAJF,QAKO,mBALP;AAMA,SAASC,YAAT,QAA6B,6BAA7B;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA;AAAV,CAAD,KAAwB;AACnC,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA,OAAlB;AAA2BC,IAAAA,eAA3B;AAA4CC,IAAAA;AAA5C,MAAuDP,YAAY,EAAzE;AACA,QAAM;AAAEQ,IAAAA,IAAF;AAAQC,IAAAA,EAAR;AAAYC,IAAAA,MAAZ;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA;AAA7B,MAAgDR,cAAc,IAAI,EAAxE;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,cAAc;;AACd,QAAIe,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAACE,OAAR,CAAgBC,GAAG,IAAI;AACrB,cAAM;AAAEC,UAAAA,MAAF;AAAUC,UAAAA;AAAV,YAAsBF,GAA5B;AACAC,QAAAA,MAAM,KAAM,YAAWV,OAAQ,EAA/B,GACIP,cAAc,CAACkB,OAAD,CADlB,GAEInB,kBAAkB,CAACmB,OAAD,CAFtB;AAGD,OALD;AAMD;;AACDjB,IAAAA,aAAa,CAACa,cAAD,CAAb;AACD,GAXQ,EAWN,CAACD,OAAD,EAAUC,cAAV,EAA0BP,OAA1B,CAXM,CAAT;;AAaA,QAAMY,WAAW,GAAGH,GAAG,IAAI;AACzBP,IAAAA,MAAM,CAACW,IAAP,CAAY,eAAZ,EAA6B;AAC3BC,MAAAA,KAAK,EAAEd,OADoB;AAE3Be,MAAAA,QAAQ,EAAG,YAAWf,OAAQ,EAFH;AAG3BgB,MAAAA,UAAU,EAAEZ,EAHe;AAI3BK,MAAAA;AAJ2B,KAA7B;AAMD,GAPD;;AASA,sBACE,oBAAC,UAAD;AACE,IAAA,eAAe,EAAE,KADnB;AAEE,IAAA,OAAO,EAAE,MAAM;AACbR,MAAAA,eAAe,CAACF,cAAc,CAACK,EAAhB,EAAoB;AAAEG,QAAAA,cAAc,EAAE;AAAlB,OAApB,CAAf;AACAV,MAAAA,MAAM;AACP,KALH;AAME,IAAA,MAAM,EAAEC,MANV;AAOE,IAAA,KAAK,EAAEK,IAAI,IAAIC,EAPjB;AAQE,IAAA,QAAQ,EAAC,iCARX;AASE,IAAA,oBAAoB,EAAEQ,WATxB;AAUE,IAAA,aAAa,EAAEP,MAAM,IAAIY,SAV3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAcD,CAxCD;;AA0CA,eAAerB,IAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport ChatWidget from '../../common/ChatWidget';\nimport {\n  deleteMessages,\n  addResponseMessage,\n  addUserMessage,\n  setBadgeCount,\n} from 'react-chat-widget';\nimport { useEvaluator } from '../context/EvaluatorContext';\n\nconst Chat = ({ onOpen, isOpen }) => {\n  const { selectedPlayer, storyId, updatePlayerLog, socket } = useEvaluator();\n  const { name, id, avatar, chatLog, unreadMessages } = selectedPlayer || {};\n\n  useEffect(() => {\n    deleteMessages();\n    if (chatLog) {\n      chatLog.forEach(msg => {\n        const { sender, content } = msg;\n        sender === `evaluator${storyId}`\n          ? addUserMessage(content)\n          : addResponseMessage(content);\n      });\n    }\n    setBadgeCount(unreadMessages);\n  }, [chatLog, unreadMessages, storyId]);\n\n  const sendHandler = msg => {\n    socket.emit('chat-msg-send', {\n      story: storyId,\n      senderId: `evaluator${storyId}`,\n      receiverId: id,\n      msg,\n    });\n  };\n\n  return (\n    <ChatWidget\n      automaticToggle={false}\n      setOpen={() => {\n        updatePlayerLog(selectedPlayer.id, { unreadMessages: 0 });\n        onOpen();\n      }}\n      isOpen={isOpen}\n      title={name || id}\n      subtitle=\"Respond to the player's request\"\n      handleNewUserMessage={sendHandler}\n      profileAvatar={avatar || undefined}\n    />\n  );\n};\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}