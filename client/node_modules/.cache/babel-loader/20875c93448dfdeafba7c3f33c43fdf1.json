{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Creator/Settings/atoms/TextColorPicker.js\";\nimport React, { useState, useCallback, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, InputLabel } from '@material-ui/core';\nimport Slider from '@material-ui/core/Slider';\nimport shortid from 'shortid';\nconst useStyles = makeStyles(theme => ({\n  colorContainer: {\n    marginBottom: theme.spacing(2),\n    display: 'flex',\n    alignItems: 'center'\n  },\n  swatch: {\n    position: 'relative',\n    top: 1,\n    marginLeft: theme.spacing(2),\n    width: 30,\n    height: 30,\n    borderRadius: '50%',\n    backgroundColor: props => rgbaToHex(props.color),\n    cursor: 'pointer'\n  },\n  input: {\n    position: 'absolute',\n    margin: 0,\n    padding: 0,\n    top: 'calc(50% + 2px)',\n    left: 'calc(50% - 2px)',\n    width: 0,\n    height: 0,\n    visibility: 'hidden'\n  }\n}));\n\nconst hexToRgba = (hexColor, opacity) => {\n  const red = parseInt(hexColor.substring(1, 3), 16);\n  const green = parseInt(hexColor.substring(3, 5), 16);\n  const blue = parseInt(hexColor.substring(5, 7), 16);\n  return `rgba(${red}, ${green}, ${blue}, ${opacity.toFixed(2)})`;\n};\n\nconst rgbaToHex = rgba => {\n  const [red, green, blue] = rgba.slice(5, -1).split(',').map(val => Number(val.trim()).toString(16).padStart(2, '0'));\n  return `#${red}${green}${blue}`;\n};\n\nconst getOpacityFromRgba = rgba => {\n  return Number(rgba.slice(5, -1).split(',').slice(-1)[0].trim());\n};\n\nconst colorInputId = shortid.generate();\n\nfunction TextColorPicker({\n  onChange,\n  value\n}) {\n  const {\n    color\n  } = value;\n  const classes = useStyles({\n    color\n  });\n  const [textOpacity, setTextOpacity] = useState(getOpacityFromRgba(color));\n  const inputRef = useRef();\n\n  const handleChangeColor = event => {\n    onChange({\n      color: hexToRgba(event.currentTarget.value, textOpacity)\n    });\n  };\n\n  const handleChangeTextOpacity = (_, newValue) => {\n    setTextOpacity(newValue / 100);\n    onChange({\n      color: hexToRgba(rgbaToHex(color), newValue / 100)\n    });\n  };\n\n  const handleClick = useCallback(() => inputRef.current.click(), []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.colorContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    htmlFor: colorInputId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"Text Color\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.swatch,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    ref: inputRef,\n    type: \"color\",\n    className: classes.input,\n    id: colorInputId,\n    value: rgbaToHex(color),\n    onChange: handleChangeColor,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Typography, {\n    id: \"opacity-slider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, \"Color Opacity\"), /*#__PURE__*/React.createElement(Slider, {\n    value: textOpacity * 100,\n    onChange: handleChangeTextOpacity,\n    getAriaValueText: value => `${value}`,\n    \"aria-labelledby\": \"opacity-slider\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default TextColorPicker;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Creator/Settings/atoms/TextColorPicker.js"],"names":["React","useState","useCallback","useRef","makeStyles","Typography","InputLabel","Slider","shortid","useStyles","theme","colorContainer","marginBottom","spacing","display","alignItems","swatch","position","top","marginLeft","width","height","borderRadius","backgroundColor","props","rgbaToHex","color","cursor","input","margin","padding","left","visibility","hexToRgba","hexColor","opacity","red","parseInt","substring","green","blue","toFixed","rgba","slice","split","map","val","Number","trim","toString","padStart","getOpacityFromRgba","colorInputId","generate","TextColorPicker","onChange","value","classes","textOpacity","setTextOpacity","inputRef","handleChangeColor","event","currentTarget","handleChangeTextOpacity","_","newValue","handleClick","current","click"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useRef } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Typography, InputLabel } from '@material-ui/core';\nimport Slider from '@material-ui/core/Slider';\nimport shortid from 'shortid';\nconst useStyles = makeStyles(theme => ({\n  colorContainer: {\n    marginBottom: theme.spacing(2),\n    display: 'flex',\n    alignItems: 'center',\n  },\n  swatch: {\n    position: 'relative',\n    top: 1,\n    marginLeft: theme.spacing(2),\n    width: 30,\n    height: 30,\n    borderRadius: '50%',\n    backgroundColor: props => rgbaToHex(props.color),\n    cursor: 'pointer',\n  },\n  input: {\n    position: 'absolute',\n    margin: 0,\n    padding: 0,\n    top: 'calc(50% + 2px)',\n    left: 'calc(50% - 2px)',\n    width: 0,\n    height: 0,\n    visibility: 'hidden',\n  },\n}));\n\nconst hexToRgba = (hexColor, opacity) => {\n  const red = parseInt(hexColor.substring(1, 3), 16);\n  const green = parseInt(hexColor.substring(3, 5), 16);\n  const blue = parseInt(hexColor.substring(5, 7), 16);\n  return `rgba(${red}, ${green}, ${blue}, ${opacity.toFixed(2)})`;\n};\n\nconst rgbaToHex = rgba => {\n  const [red, green, blue] = rgba\n    .slice(5, -1)\n    .split(',')\n    .map(val => Number(val.trim()).toString(16).padStart(2, '0'));\n  return `#${red}${green}${blue}`;\n};\n\nconst getOpacityFromRgba = rgba => {\n  return Number(rgba.slice(5, -1).split(',').slice(-1)[0].trim());\n};\n\nconst colorInputId = shortid.generate();\n\nfunction TextColorPicker({ onChange, value }) {\n  const { color } = value;\n  const classes = useStyles({ color });\n\n  const [textOpacity, setTextOpacity] = useState(getOpacityFromRgba(color));\n  const inputRef = useRef();\n\n  const handleChangeColor = event => {\n    onChange({ color: hexToRgba(event.currentTarget.value, textOpacity) });\n  };\n\n  const handleChangeTextOpacity = (_, newValue) => {\n    setTextOpacity(newValue / 100);\n    onChange({ color: hexToRgba(rgbaToHex(color), newValue / 100) });\n  };\n\n  const handleClick = useCallback(() => inputRef.current.click(), []);\n\n  return (\n    <div>\n      <div className={classes.colorContainer}>\n        <InputLabel htmlFor={colorInputId}>Text Color</InputLabel>\n        <div className={classes.swatch} onClick={handleClick}>\n          <input\n            ref={inputRef}\n            type=\"color\"\n            className={classes.input}\n            id={colorInputId}\n            value={rgbaToHex(color)}\n            onChange={handleChangeColor}\n          />\n        </div>\n      </div>\n      <Typography id=\"opacity-slider\">Color Opacity</Typography>\n      <Slider\n        value={textOpacity * 100}\n        onChange={handleChangeTextOpacity}\n        getAriaValueText={value => `${value}`}\n        aria-labelledby=\"opacity-slider\"\n      />\n    </div>\n  );\n}\n\nexport default TextColorPicker;\n"]},"metadata":{},"sourceType":"module"}