{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/common/Elements/Points.js\";\n\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport Text from './Text';\nconst base = css``;\n/**\n *\n * points is object/array like:\n * {\n *  name: 'Points',\n *  messages: [\n *    { threshold: 10, text: 'Fai schifo' },\n *    { threshold: 15, text: 'Sei bravo' },\n *    { threshold: 30, text: 'Sei fantastico' },\n *    ...\n * ],\n * story: {\n *  points: null,\n * }\n */\n\nconst defaultMessage = \"This is the end of the road. Here's how many points you collected!\";\n\nconst Points = ({\n  messages,\n  points,\n  style,\n  initialValue = 0\n}) => {\n  // you won't believe this: we need the unpacking because otherwise JavaScript, written\n  // by complete idiots, uses a pointer to the same memory slots used in the editor\n  // \"Inspector\": this means that when the preview is rendered, the point messages are\n  // reordered, and their positions change in the Inspector. Actually unbelievable.\n  const message = [...messages].sort((a, b) => b.threshold - a.threshold).find(message => points >= message.threshold);\n  return jsx(\"div\", {\n    css: [base, style],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, jsx(Text, {\n    text: points || initialValue,\n    style: style && style['Points'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }), jsx(Text, {\n    text: message ? message.text : defaultMessage,\n    style: style && style['Text'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Points;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/common/Elements/Points.js"],"names":["css","jsx","Text","base","defaultMessage","Points","messages","points","style","initialValue","message","sort","a","b","threshold","find","text"],"mappings":";;AAAA;AACA,SAASA,GAAT,EAAcC,GAAd,QAAyB,eAAzB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,MAAMC,IAAI,GAAGH,GAAI,EAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMI,cAAc,GAClB,oEADF;;AAGA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA,MAAZ;AAAoBC,EAAAA,KAApB;AAA2BC,EAAAA,YAAY,GAAG;AAA1C,CAAD,KAAmD;AAChE;AACA;AACA;AACA;AACA,QAAMC,OAAO,GAAG,CAAC,GAAGJ,QAAJ,EACbK,IADa,CACR,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAC,CAACC,SAAF,GAAcF,CAAC,CAACE,SADlB,EAEbC,IAFa,CAERL,OAAO,IAAIH,MAAM,IAAIG,OAAO,CAACI,SAFrB,CAAhB;AAIA,SACE;AAAK,IAAA,GAAG,EAAE,CAACX,IAAD,EAAOK,KAAP,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,IAAC,IAAD;AAAM,IAAA,IAAI,EAAED,MAAM,IAAIE,YAAtB;AAAoC,IAAA,KAAK,EAAED,KAAK,IAAIA,KAAK,CAAC,QAAD,CAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,IAAC,IAAD;AACE,IAAA,IAAI,EAAEE,OAAO,GAAGA,OAAO,CAACM,IAAX,GAAkBZ,cADjC;AAEE,IAAA,KAAK,EAAEI,KAAK,IAAIA,KAAK,CAAC,MAAD,CAFvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF;AASD,CAlBD;;AAoBA,eAAeH,MAAf","sourcesContent":["/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\n\nimport Text from './Text';\n\nconst base = css``;\n\n/**\n *\n * points is object/array like:\n * {\n *  name: 'Points',\n *  messages: [\n *    { threshold: 10, text: 'Fai schifo' },\n *    { threshold: 15, text: 'Sei bravo' },\n *    { threshold: 30, text: 'Sei fantastico' },\n *    ...\n * ],\n * story: {\n *  points: null,\n * }\n */\nconst defaultMessage =\n  \"This is the end of the road. Here's how many points you collected!\";\n\nconst Points = ({ messages, points, style, initialValue = 0 }) => {\n  // you won't believe this: we need the unpacking because otherwise JavaScript, written\n  // by complete idiots, uses a pointer to the same memory slots used in the editor\n  // \"Inspector\": this means that when the preview is rendered, the point messages are\n  // reordered, and their positions change in the Inspector. Actually unbelievable.\n  const message = [...messages]\n    .sort((a, b) => b.threshold - a.threshold)\n    .find(message => points >= message.threshold);\n\n  return (\n    <div css={[base, style]}>\n      <Text text={points || initialValue} style={style && style['Points']} />\n      <Text\n        text={message ? message.text : defaultMessage}\n        style={style && style['Text']}\n      />\n    </div>\n  );\n};\n\nexport default Points;\n"]},"metadata":{},"sourceType":"module"}