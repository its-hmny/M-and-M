{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Creator/Settings/atoms/FontFamily.js\";\nimport React from 'react'; // import { makeStyles } from '@material-ui/core/styles';\n\nimport { TextField } from '@material-ui/core';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport shortid from 'shortid';\nconst filter = createFilterOptions();\n/*\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));*/\n\nfunction FontFamilyInput({\n  onChange,\n  value\n}) {\n  //const classes = useStyles();\n  const autoInput = shortid.generate();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    id: autoInput,\n    onChange: (_, newValue) => {\n      if (typeof newValue === 'string') {// enter a string and press enter\n        // maybe we want to add dialog.. https://material-ui.com/components/autocomplete/#creatable\n        // if you want to implement adding new input, REMEMBER freeSolo as an option\n      } else if (newValue && newValue.inputValue) {// Create a new value from the user input (clicking add)\n        // same shit as before. for now, you HAVE to select one of the options\n      } else if (newValue) {\n        // if i pressed one of the options\n        onChange({\n          fontFamily: newValue.name\n        });\n      }\n    },\n    filterOptions: (options, params) => {\n      const filtered = filter(options, params);\n      /*\n      // Suggest the creation of a new value\n      if (params.inputValue !== '') {\n        filtered.push({\n          inputValue: params.inputValue,\n          title: `Add \"${params.inputValue}\"`,\n        });\n      }\n      */\n\n      return filtered;\n    },\n    selectOnFocus: true,\n    clearOnBlur: true,\n    handleHomeEndKeys: true,\n    required: true,\n    value: possibleFonts.find(font => font.name === value.fontFamily),\n    options: possibleFonts.sort(),\n    getOptionLabel: option => option.name,\n    groupBy: option => option.type,\n    renderOption: option => option.name,\n    style: {\n      width: 300\n    },\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"Font family\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default FontFamilyInput;\nconst possibleFonts = [{\n  name: 'sans-serif',\n  type: 'sans-serif'\n}, {\n  name: 'Helvetica',\n  type: 'sans-serif'\n}, {\n  name: 'Arial',\n  type: 'sans-serif'\n}, {\n  name: 'Verdana',\n  type: 'sans-serif'\n}, {\n  name: 'Tahoma',\n  type: 'sans-serif'\n}, {\n  name: 'Comic Sans MS',\n  type: 'sans-serif'\n}, {\n  name: 'Impact',\n  type: 'sans-serif'\n}, {\n  name: 'Avant Garde',\n  type: 'sans-serif'\n}, {\n  name: 'Trebuchet MS',\n  type: 'sans-serif'\n}, {\n  name: 'Geneva',\n  type: 'sans-serif'\n}, {\n  name: 'serif',\n  type: 'serif'\n}, {\n  name: 'Times',\n  type: 'serif'\n}, {\n  name: 'Times New Roman',\n  type: 'serif'\n}, {\n  name: 'Georgia',\n  type: 'serif'\n}, {\n  name: 'Palatino',\n  type: 'serif'\n}, {\n  name: 'Bookman',\n  type: 'serif'\n}, {\n  name: 'Garamond',\n  type: 'serif'\n}, {\n  name: 'monospace',\n  type: 'monospace'\n}, {\n  name: 'Courier',\n  type: 'monospace'\n}, {\n  name: 'Courier New',\n  type: 'monospace'\n}, {\n  name: 'Andale Mono',\n  type: 'monospace'\n}, {\n  name: 'Lucida Console',\n  type: 'monospace'\n}];","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Creator/Settings/atoms/FontFamily.js"],"names":["React","TextField","Autocomplete","createFilterOptions","shortid","filter","FontFamilyInput","onChange","value","autoInput","generate","_","newValue","inputValue","fontFamily","name","options","params","filtered","possibleFonts","find","font","sort","option","type","width"],"mappings":"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","sourcesContent":["import React from 'react';\n// import { makeStyles } from '@material-ui/core/styles';\nimport { TextField } from '@material-ui/core';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete';\nimport shortid from 'shortid';\n\nconst filter = createFilterOptions();\n/*\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n}));*/\n\nfunction FontFamilyInput({ onChange, value }) {\n  //const classes = useStyles();\n  const autoInput = shortid.generate();\n\n  return (\n    <div>\n      <Autocomplete\n        id={autoInput}\n        onChange={(_, newValue) => {\n          if (typeof newValue === 'string') {\n            // enter a string and press enter\n            // maybe we want to add dialog.. https://material-ui.com/components/autocomplete/#creatable\n            // if you want to implement adding new input, REMEMBER freeSolo as an option\n          } else if (newValue && newValue.inputValue) {\n            // Create a new value from the user input (clicking add)\n            // same shit as before. for now, you HAVE to select one of the options\n          } else if (newValue) {\n            // if i pressed one of the options\n            onChange({ fontFamily: newValue.name });\n          }\n        }}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n          /*\n          // Suggest the creation of a new value\n          if (params.inputValue !== '') {\n            filtered.push({\n              inputValue: params.inputValue,\n              title: `Add \"${params.inputValue}\"`,\n            });\n          }\n          */\n          return filtered;\n        }}\n        selectOnFocus\n        clearOnBlur\n        handleHomeEndKeys\n        required\n        value={possibleFonts.find(font => font.name === value.fontFamily)}\n        options={possibleFonts.sort()}\n        getOptionLabel={option => option.name}\n        groupBy={option => option.type}\n        renderOption={option => option.name}\n        style={{ width: 300 }}\n        renderInput={params => (\n          <TextField {...params} label=\"Font family\" variant=\"outlined\" />\n        )}\n      />\n    </div>\n  );\n}\n\nexport default FontFamilyInput;\n\nconst possibleFonts = [\n  { name: 'sans-serif', type: 'sans-serif' },\n  { name: 'Helvetica', type: 'sans-serif' },\n  { name: 'Arial', type: 'sans-serif' },\n  { name: 'Verdana', type: 'sans-serif' },\n  { name: 'Tahoma', type: 'sans-serif' },\n  { name: 'Comic Sans MS', type: 'sans-serif' },\n  { name: 'Impact', type: 'sans-serif' },\n  { name: 'Avant Garde', type: 'sans-serif' },\n  { name: 'Trebuchet MS', type: 'sans-serif' },\n  { name: 'Geneva', type: 'sans-serif' },\n  { name: 'serif', type: 'serif' },\n  { name: 'Times', type: 'serif' },\n  { name: 'Times New Roman', type: 'serif' },\n  { name: 'Georgia', type: 'serif' },\n  { name: 'Palatino', type: 'serif' },\n  { name: 'Bookman', type: 'serif' },\n  { name: 'Garamond', type: 'serif' },\n  { name: 'monospace', type: 'monospace' },\n  { name: 'Courier', type: 'monospace' },\n  { name: 'Courier New', type: 'monospace' },\n  { name: 'Andale Mono', type: 'monospace' },\n  { name: 'Lucida Console', type: 'monospace' },\n];\n"]},"metadata":{},"sourceType":"module"}