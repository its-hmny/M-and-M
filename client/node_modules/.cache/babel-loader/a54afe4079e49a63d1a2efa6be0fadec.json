{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/ButtonFragment.js\";\nimport React from 'react';\nimport { Button } from '@material-ui/core';\nimport { useEditor } from '../../context/EditorContext';\n\nconst deleteEdges = (node, components, target) => {\n  return components.map(component => {\n    if (component.story) {\n      let updatedNextNode = component.story.nextNode;\n\n      if (typeof updatedNextNode === 'object') {\n        updatedNextNode = Object.entries(updatedNextNode).reduce((obj, [label, value]) => ({ ...obj,\n          [label]: value === target ? node.id : value\n        }), {});\n      } else if (updatedNextNode === target) {\n        updatedNextNode = node.id;\n      }\n\n      component.story.nextNode = updatedNextNode;\n    }\n\n    if (component.children) {\n      component.children = deleteEdges(node, component.children, target);\n    }\n\n    return component;\n  });\n};\n\nconst ButtonFragment = props => {\n  const {\n    classNames,\n    fragmentSpecificProps\n  } = props;\n  const {\n    story,\n    workingActivity,\n    saveStory,\n    setWorkingActivity\n  } = useEditor();\n\n  const onClick = () => {\n    let {\n      nodes,\n      ...others\n    } = story;\n    nodes = nodes.filter(node => node.id !== workingActivity);\n    nodes = nodes.map(node => ({ ...node,\n      components: deleteEdges(node, node.components, workingActivity)\n    }));\n    saveStory({\n      nodes,\n      ...others\n    });\n    setWorkingActivity(undefined);\n  };\n\n  return /*#__PURE__*/React.createElement(Button, {\n    onClick: onClick,\n    color: \"primary\",\n    variant: \"contained\",\n    className: classNames.InspectorElement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, fragmentSpecificProps.text);\n};\n\nexport default ButtonFragment;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/ButtonFragment.js"],"names":["React","Button","useEditor","deleteEdges","node","components","target","map","component","story","updatedNextNode","nextNode","Object","entries","reduce","obj","label","value","id","children","ButtonFragment","props","classNames","fragmentSpecificProps","workingActivity","saveStory","setWorkingActivity","onClick","nodes","others","filter","undefined","InspectorElement","text"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,SAAT,QAA0B,6BAA1B;;AAEA,MAAMC,WAAW,GAAG,CAACC,IAAD,EAAOC,UAAP,EAAmBC,MAAnB,KAA8B;AAChD,SAAOD,UAAU,CAACE,GAAX,CAAeC,SAAS,IAAI;AACjC,QAAIA,SAAS,CAACC,KAAd,EAAqB;AACnB,UAAIC,eAAe,GAAGF,SAAS,CAACC,KAAV,CAAgBE,QAAtC;;AACA,UAAI,OAAOD,eAAP,KAA2B,QAA/B,EAAyC;AACvCA,QAAAA,eAAe,GAAGE,MAAM,CAACC,OAAP,CAAeH,eAAf,EAAgCI,MAAhC,CAChB,CAACC,GAAD,EAAM,CAACC,KAAD,EAAQC,KAAR,CAAN,MAA0B,EACxB,GAAGF,GADqB;AAExB,WAACC,KAAD,GAASC,KAAK,KAAKX,MAAV,GAAmBF,IAAI,CAACc,EAAxB,GAA6BD;AAFd,SAA1B,CADgB,EAKhB,EALgB,CAAlB;AAOD,OARD,MAQO,IAAIP,eAAe,KAAKJ,MAAxB,EAAgC;AACrCI,QAAAA,eAAe,GAAGN,IAAI,CAACc,EAAvB;AACD;;AACDV,MAAAA,SAAS,CAACC,KAAV,CAAgBE,QAAhB,GAA2BD,eAA3B;AACD;;AAED,QAAIF,SAAS,CAACW,QAAd,EAAwB;AACtBX,MAAAA,SAAS,CAACW,QAAV,GAAqBhB,WAAW,CAACC,IAAD,EAAOI,SAAS,CAACW,QAAjB,EAA2Bb,MAA3B,CAAhC;AACD;;AAED,WAAOE,SAAP;AACD,GAtBM,CAAP;AAuBD,CAxBD;;AA0BA,MAAMY,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,MAAwCF,KAA9C;AACA,QAAM;AAAEZ,IAAAA,KAAF;AAASe,IAAAA,eAAT;AAA0BC,IAAAA,SAA1B;AAAqCC,IAAAA;AAArC,MAA4DxB,SAAS,EAA3E;;AAEA,QAAMyB,OAAO,GAAG,MAAM;AACpB,QAAI;AAAEC,MAAAA,KAAF;AAAS,SAAGC;AAAZ,QAAuBpB,KAA3B;AACAmB,IAAAA,KAAK,GAAGA,KAAK,CAACE,MAAN,CAAa1B,IAAI,IAAIA,IAAI,CAACc,EAAL,KAAYM,eAAjC,CAAR;AACAI,IAAAA,KAAK,GAAGA,KAAK,CAACrB,GAAN,CAAUH,IAAI,KAAK,EACzB,GAAGA,IADsB;AAEzBC,MAAAA,UAAU,EAAEF,WAAW,CAACC,IAAD,EAAOA,IAAI,CAACC,UAAZ,EAAwBmB,eAAxB;AAFE,KAAL,CAAd,CAAR;AAIAC,IAAAA,SAAS,CAAC;AAAEG,MAAAA,KAAF;AAAS,SAAGC;AAAZ,KAAD,CAAT;AACAH,IAAAA,kBAAkB,CAACK,SAAD,CAAlB;AACD,GATD;;AAWA,sBACE,oBAAC,MAAD;AACE,IAAA,OAAO,EAAEJ,OADX;AAEE,IAAA,KAAK,EAAC,SAFR;AAGE,IAAA,OAAO,EAAC,WAHV;AAIE,IAAA,SAAS,EAAEL,UAAU,CAACU,gBAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGT,qBAAqB,CAACU,IANzB,CADF;AAUD,CAzBD;;AA2BA,eAAeb,cAAf","sourcesContent":["import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { useEditor } from '../../context/EditorContext';\n\nconst deleteEdges = (node, components, target) => {\n  return components.map(component => {\n    if (component.story) {\n      let updatedNextNode = component.story.nextNode;\n      if (typeof updatedNextNode === 'object') {\n        updatedNextNode = Object.entries(updatedNextNode).reduce(\n          (obj, [label, value]) => ({\n            ...obj,\n            [label]: value === target ? node.id : value,\n          }),\n          {}\n        );\n      } else if (updatedNextNode === target) {\n        updatedNextNode = node.id;\n      }\n      component.story.nextNode = updatedNextNode;\n    }\n\n    if (component.children) {\n      component.children = deleteEdges(node, component.children, target);\n    }\n\n    return component;\n  });\n};\n\nconst ButtonFragment = props => {\n  const { classNames, fragmentSpecificProps } = props;\n  const { story, workingActivity, saveStory, setWorkingActivity } = useEditor();\n\n  const onClick = () => {\n    let { nodes, ...others } = story;\n    nodes = nodes.filter(node => node.id !== workingActivity);\n    nodes = nodes.map(node => ({\n      ...node,\n      components: deleteEdges(node, node.components, workingActivity),\n    }));\n    saveStory({ nodes, ...others });\n    setWorkingActivity(undefined);\n  };\n\n  return (\n    <Button\n      onClick={onClick}\n      color=\"primary\"\n      variant=\"contained\"\n      className={classNames.InspectorElement}\n    >\n      {fragmentSpecificProps.text}\n    </Button>\n  );\n};\n\nexport default ButtonFragment;\n"]},"metadata":{},"sourceType":"module"}