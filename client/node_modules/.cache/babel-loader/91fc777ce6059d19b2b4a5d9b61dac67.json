{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/common/Elements/SingleAnsChoices.js\";\n\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { useState, useMemo, useEffect } from 'react';\nimport { Radio } from './Choice';\nimport Button from './Button';\n/** renders a single choice component:\n * PARTS:\n *  - Choice -> input radio;\n *  - Button (submit);\n *\n * STYLE SECTIONS:\n *  - Radio\n *  - Button\n */\n\nexport const ANSWER_VALUE = {\n  CORRECT: '[CORRECT]',\n  WRONG: '[WRONG]'\n};\nconst base = css`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 5px;\n  > div {\n    margin-bottom: 1rem;\n    width: 100%;\n  }\n`;\n\nconst noop = () => {};\n\nfunction SingleAnsChoices({\n  name,\n  answers,\n  withSubmit,\n  style,\n  onSubmit = noop,\n  initialValue = null\n}) {\n  const [selectedAnswer, setSelectedAnswer] = useState(initialValue); //let's only work with IDs\n\n  const correctAnswer = useMemo(() => answers.filter(answer => answer.value === ANSWER_VALUE.CORRECT).map(answer => answer.id).sort(), [answers]);\n  const isCorrect = useMemo(() => {\n    // if an answer is selected AND is correct, return correct\n    // Uses == instead === because for some reason type(selectedAnswer) != type(correctAnswer)\n    // so a conversion is needed\n    return selectedAnswer && selectedAnswer === correctAnswer[0] ? ANSWER_VALUE.CORRECT : ANSWER_VALUE.WRONG;\n  }, [correctAnswer, selectedAnswer]);\n\n  const handleSelected = event => {\n    // since it's radio button, selected answer is only one.\n    const {\n      id\n    } = event.target;\n    setSelectedAnswer(id);\n  };\n\n  useEffect(() => {\n    if (!withSubmit && selectedAnswer) {\n      onSubmit(isCorrect, [answers.find(answer => answer.id === selectedAnswer)]);\n    }\n  }, [withSubmit, onSubmit, isCorrect, answers, selectedAnswer]);\n  return jsx(\"div\", {\n    css: [base, style],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, answers.map(({\n    id,\n    text\n  }) => jsx(Radio, {\n    key: id,\n    id: id,\n    name: name,\n    label: text,\n    selected: id === selectedAnswer,\n    onSelected: handleSelected,\n    style: style && style['Radio'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }))), withSubmit && jsx(Button, {\n    disabled: selectedAnswer === null,\n    onClick: () => onSubmit(isCorrect, [answers.find(answer => answer.id === selectedAnswer)]),\n    style: style && style.Button,\n    text: \"Conferma\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default SingleAnsChoices;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/common/Elements/SingleAnsChoices.js"],"names":["css","jsx","useState","useMemo","useEffect","Radio","Button","ANSWER_VALUE","CORRECT","WRONG","base","noop","SingleAnsChoices","name","answers","withSubmit","style","onSubmit","initialValue","selectedAnswer","setSelectedAnswer","correctAnswer","filter","answer","value","map","id","sort","isCorrect","handleSelected","event","target","find","text"],"mappings":";;AAAA;AACA,SAASA,GAAT,EAAcC,GAAd,QAAyB,eAAzB;AACA,SAASC,QAAT,EAAmBC,OAAnB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,OAAO,EAAE,WADiB;AAE1BC,EAAAA,KAAK,EAAE;AAFmB,CAArB;AAKP,MAAMC,IAAI,GAAGV,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAVA;;AAYA,MAAMW,IAAI,GAAG,MAAM,CAAE,CAArB;;AAEA,SAASC,gBAAT,CAA0B;AACxBC,EAAAA,IADwB;AAExBC,EAAAA,OAFwB;AAGxBC,EAAAA,UAHwB;AAIxBC,EAAAA,KAJwB;AAKxBC,EAAAA,QAAQ,GAAGN,IALa;AAMxBO,EAAAA,YAAY,GAAG;AANS,CAA1B,EAOG;AACD,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsClB,QAAQ,CAACgB,YAAD,CAApD,CADC,CAGD;;AACA,QAAMG,aAAa,GAAGlB,OAAO,CAC3B,MACEW,OAAO,CACJQ,MADH,CACUC,MAAM,IAAIA,MAAM,CAACC,KAAP,KAAiBjB,YAAY,CAACC,OADlD,EAEGiB,GAFH,CAEOF,MAAM,IAAIA,MAAM,CAACG,EAFxB,EAGGC,IAHH,EAFyB,EAM3B,CAACb,OAAD,CAN2B,CAA7B;AASA,QAAMc,SAAS,GAAGzB,OAAO,CAAC,MAAM;AAC9B;AACA;AACA;AACA,WAAOgB,cAAc,IAAIA,cAAc,KAAKE,aAAa,CAAC,CAAD,CAAlD,GACHd,YAAY,CAACC,OADV,GAEHD,YAAY,CAACE,KAFjB;AAGD,GAPwB,EAOtB,CAACY,aAAD,EAAgBF,cAAhB,CAPsB,CAAzB;;AASA,QAAMU,cAAc,GAAGC,KAAK,IAAI;AAC9B;AACA,UAAM;AAAEJ,MAAAA;AAAF,QAASI,KAAK,CAACC,MAArB;AACAX,IAAAA,iBAAiB,CAACM,EAAD,CAAjB;AACD,GAJD;;AAMAtB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACW,UAAD,IAAeI,cAAnB,EAAmC;AACjCF,MAAAA,QAAQ,CAACW,SAAD,EAAY,CAACd,OAAO,CAACkB,IAAR,CAAaT,MAAM,IAAIA,MAAM,CAACG,EAAP,KAAcP,cAArC,CAAD,CAAZ,CAAR;AACD;AACF,GAJQ,EAIN,CAACJ,UAAD,EAAaE,QAAb,EAAuBW,SAAvB,EAAkCd,OAAlC,EAA2CK,cAA3C,CAJM,CAAT;AAMA,SACE;AAAK,IAAA,GAAG,EAAE,CAACT,IAAD,EAAOM,KAAP,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,OAAO,CAACW,GAAR,CAAY,CAAC;AAAEC,IAAAA,EAAF;AAAMO,IAAAA;AAAN,GAAD,KACX,IAAC,KAAD;AACE,IAAA,GAAG,EAAEP,EADP;AAEE,IAAA,EAAE,EAAEA,EAFN;AAGE,IAAA,IAAI,EAAEb,IAHR;AAIE,IAAA,KAAK,EAAEoB,IAJT;AAKE,IAAA,QAAQ,EAAEP,EAAE,KAAKP,cALnB;AAME,IAAA,UAAU,EAAEU,cANd;AAOE,IAAA,KAAK,EAAEb,KAAK,IAAIA,KAAK,CAAC,OAAD,CAPvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CADF,EAeGD,UAAU,IACT,IAAC,MAAD;AACE,IAAA,QAAQ,EAAEI,cAAc,KAAK,IAD/B;AAEE,IAAA,OAAO,EAAE,MACPF,QAAQ,CAACW,SAAD,EAAY,CAACd,OAAO,CAACkB,IAAR,CAAaT,MAAM,IAAIA,MAAM,CAACG,EAAP,KAAcP,cAArC,CAAD,CAAZ,CAHZ;AAKE,IAAA,KAAK,EAAEH,KAAK,IAAIA,KAAK,CAACV,MALxB;AAME,IAAA,IAAI,EAAC,UANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhBJ,CADF;AA4BD;;AACD,eAAeM,gBAAf","sourcesContent":["/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { useState, useMemo, useEffect } from 'react';\nimport { Radio } from './Choice';\nimport Button from './Button';\n\n/** renders a single choice component:\n * PARTS:\n *  - Choice -> input radio;\n *  - Button (submit);\n *\n * STYLE SECTIONS:\n *  - Radio\n *  - Button\n */\n\nexport const ANSWER_VALUE = {\n  CORRECT: '[CORRECT]',\n  WRONG: '[WRONG]',\n};\n\nconst base = css`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 5px;\n  > div {\n    margin-bottom: 1rem;\n    width: 100%;\n  }\n`;\n\nconst noop = () => {};\n\nfunction SingleAnsChoices({\n  name,\n  answers,\n  withSubmit,\n  style,\n  onSubmit = noop,\n  initialValue = null,\n}) {\n  const [selectedAnswer, setSelectedAnswer] = useState(initialValue);\n\n  //let's only work with IDs\n  const correctAnswer = useMemo(\n    () =>\n      answers\n        .filter(answer => answer.value === ANSWER_VALUE.CORRECT)\n        .map(answer => answer.id)\n        .sort(),\n    [answers]\n  );\n\n  const isCorrect = useMemo(() => {\n    // if an answer is selected AND is correct, return correct\n    // Uses == instead === because for some reason type(selectedAnswer) != type(correctAnswer)\n    // so a conversion is needed\n    return selectedAnswer && selectedAnswer === correctAnswer[0]\n      ? ANSWER_VALUE.CORRECT\n      : ANSWER_VALUE.WRONG;\n  }, [correctAnswer, selectedAnswer]);\n\n  const handleSelected = event => {\n    // since it's radio button, selected answer is only one.\n    const { id } = event.target;\n    setSelectedAnswer(id);\n  };\n\n  useEffect(() => {\n    if (!withSubmit && selectedAnswer) {\n      onSubmit(isCorrect, [answers.find(answer => answer.id === selectedAnswer)]);\n    }\n  }, [withSubmit, onSubmit, isCorrect, answers, selectedAnswer]);\n\n  return (\n    <div css={[base, style]}>\n      <div>\n        {answers.map(({ id, text }) => (\n          <Radio\n            key={id}\n            id={id}\n            name={name}\n            label={text}\n            selected={id === selectedAnswer}\n            onSelected={handleSelected}\n            style={style && style['Radio']}\n          />\n        ))}\n      </div>\n\n      {withSubmit && (\n        <Button\n          disabled={selectedAnswer === null}\n          onClick={() =>\n            onSubmit(isCorrect, [answers.find(answer => answer.id === selectedAnswer)])\n          }\n          style={style && style.Button}\n          text=\"Conferma\"\n        />\n      )}\n    </div>\n  );\n}\nexport default SingleAnsChoices;\n"]},"metadata":{},"sourceType":"module"}