{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/common/Graph.js\";\nimport React, { useEffect, useRef } from 'react';\nimport isEqual from 'lodash.isequal';\nimport differenceWith from 'lodash.differencewith';\nimport { DataSet } from 'vis-data/peer/esm/vis-data';\nimport { Network } from 'vis-network/peer/esm/vis-network';\nimport 'vis-network/styles/vis-network.css';\nconst defaultOptions = {\n  physics: {\n    stabilization: false\n  },\n  autoResize: false,\n  edges: {\n    smooth: false,\n    color: '#000000',\n    width: 0.5,\n    arrows: {\n      to: {\n        enabled: true,\n        scaleFactor: 0.5\n      }\n    }\n  }\n};\n\nconst Graph = ({\n  data,\n  options = defaultOptions,\n  events = {},\n  getNetwork,\n  getNodes,\n  getEdges\n}) => {\n  const nodes = useRef(new DataSet(data.nodes));\n  const edges = useRef(new DataSet(data.edges));\n  const network = useRef(null);\n  const container = useRef(null);\n  useEffect(() => {\n    network.current = new Network(container.current, {\n      nodes: nodes.current,\n      edges: edges.current\n    }, options);\n\n    if (getNetwork) {\n      getNetwork(network.current);\n    }\n\n    if (getNodes) {\n      getNodes(nodes.current);\n    }\n\n    if (getEdges) {\n      getEdges(edges.current);\n    }\n  }, [getNetwork, getNodes, getEdges, options]);\n  useEffect(() => {\n    const nodesChange = !isEqual(nodes.current, data.nodes);\n    const edgesChange = !isEqual(edges.current, data.edges);\n\n    if (nodesChange) {\n      const idIsEqual = (n1, n2) => n1.id === n2.id;\n\n      const nodesRemoved = differenceWith(nodes.current.get(), data.nodes, idIsEqual);\n      const nodesAdded = differenceWith(data.nodes, nodes.current.get(), idIsEqual);\n      const nodesChanged = differenceWith(differenceWith(data.nodes, nodes.current.get(), isEqual), nodesAdded);\n      nodes.current.remove(nodesRemoved);\n      nodes.current.add(nodesAdded);\n      nodes.current.update(nodesChanged);\n    }\n\n    if (edgesChange) {\n      const edgesRemoved = differenceWith(edges.current.get(), data.edges, isEqual);\n      const edgesAdded = differenceWith(data.edges, edges.current.get(), isEqual);\n      const edgesChanged = differenceWith(differenceWith(data.edges, edges.current.get(), isEqual), edgesAdded);\n      edges.current.remove(edgesRemoved);\n      edges.current.add(edgesAdded);\n      edges.current.update(edgesChanged);\n    }\n  }, [data]);\n  useEffect(() => {\n    network.current.setOptions(options);\n  }, [options]);\n  useEffect(() => {\n    // Add user provied events to network\n    // eslint-disable-next-line no-restricted-syntax\n    for (const eventName of Object.keys(events)) {\n      network.current.on(eventName, events[eventName]);\n    }\n\n    return () => {\n      for (const eventName of Object.keys(events)) {\n        network.current.off(eventName, events[eventName]);\n      }\n    };\n  }, [events]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default Graph;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/common/Graph.js"],"names":["React","useEffect","useRef","isEqual","differenceWith","DataSet","Network","defaultOptions","physics","stabilization","autoResize","edges","smooth","color","width","arrows","to","enabled","scaleFactor","Graph","data","options","events","getNetwork","getNodes","getEdges","nodes","network","container","current","nodesChange","edgesChange","idIsEqual","n1","n2","id","nodesRemoved","get","nodesAdded","nodesChanged","remove","add","update","edgesRemoved","edgesAdded","edgesChanged","setOptions","eventName","Object","keys","on","off"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport isEqual from 'lodash.isequal';\nimport differenceWith from 'lodash.differencewith';\nimport { DataSet } from 'vis-data/peer/esm/vis-data';\nimport { Network } from 'vis-network/peer/esm/vis-network';\n\nimport 'vis-network/styles/vis-network.css';\n\nconst defaultOptions = {\n  physics: {\n    stabilization: false,\n  },\n  autoResize: false,\n  edges: {\n    smooth: false,\n    color: '#000000',\n    width: 0.5,\n    arrows: {\n      to: {\n        enabled: true,\n        scaleFactor: 0.5,\n      },\n    },\n  },\n};\n\nconst Graph = ({\n  data,\n  options = defaultOptions,\n  events = {},\n  getNetwork,\n  getNodes,\n  getEdges,\n}) => {\n  const nodes = useRef(new DataSet(data.nodes));\n  const edges = useRef(new DataSet(data.edges));\n  const network = useRef(null);\n  const container = useRef(null);\n\n  useEffect(() => {\n    network.current = new Network(\n      container.current,\n      { nodes: nodes.current, edges: edges.current },\n      options\n    );\n\n    if (getNetwork) {\n      getNetwork(network.current);\n    }\n\n    if (getNodes) {\n      getNodes(nodes.current);\n    }\n\n    if (getEdges) {\n      getEdges(edges.current);\n    }\n  }, [getNetwork, getNodes, getEdges, options]);\n\n  useEffect(() => {\n    const nodesChange = !isEqual(nodes.current, data.nodes);\n    const edgesChange = !isEqual(edges.current, data.edges);\n\n    if (nodesChange) {\n      const idIsEqual = (n1, n2) => n1.id === n2.id;\n      const nodesRemoved = differenceWith(nodes.current.get(), data.nodes, idIsEqual);\n      const nodesAdded = differenceWith(data.nodes, nodes.current.get(), idIsEqual);\n      const nodesChanged = differenceWith(\n        differenceWith(data.nodes, nodes.current.get(), isEqual),\n        nodesAdded\n      );\n\n      nodes.current.remove(nodesRemoved);\n      nodes.current.add(nodesAdded);\n      nodes.current.update(nodesChanged);\n    }\n\n    if (edgesChange) {\n      const edgesRemoved = differenceWith(edges.current.get(), data.edges, isEqual);\n      const edgesAdded = differenceWith(data.edges, edges.current.get(), isEqual);\n      const edgesChanged = differenceWith(\n        differenceWith(data.edges, edges.current.get(), isEqual),\n        edgesAdded\n      );\n      edges.current.remove(edgesRemoved);\n      edges.current.add(edgesAdded);\n      edges.current.update(edgesChanged);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    network.current.setOptions(options);\n  }, [options]);\n\n  useEffect(() => {\n    // Add user provied events to network\n    // eslint-disable-next-line no-restricted-syntax\n    for (const eventName of Object.keys(events)) {\n      network.current.on(eventName, events[eventName]);\n    }\n\n    return () => {\n      for (const eventName of Object.keys(events)) {\n        network.current.off(eventName, events[eventName]);\n      }\n    };\n  }, [events]);\n\n  return <div ref={container} />;\n};\n\nexport default Graph;\n"]},"metadata":{},"sourceType":"module"}