{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/InputFragment.js\";\nimport React from 'react';\nimport { TextField, makeStyles } from '@material-ui/core';\nimport { useEditor } from '../../context/EditorContext';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '25ch'\n  },\n  inputRoot: {\n    paddingRight: theme.spacing(2)\n  }\n}));\n\nconst InputFragment = ({\n  classNames,\n  path,\n  fragmentSpecificProps\n}) => {\n  const {\n    root,\n    inputRoot\n  } = useStyles();\n  const {\n    valToChange,\n    label,\n    onChange,\n    pointsPath,\n    pointsValToChange\n  } = fragmentSpecificProps;\n  const {\n    getFromPath,\n    setPathToValue\n  } = useEditor();\n  path = path || [];\n  const value = getFromPath(path)[valToChange];\n  const PointsCompletePath = path.concat(pointsPath);\n  const pointsValue = getFromPath(PointsCompletePath)[pointsValToChange];\n\n  const setNumberField = (value, story) => {\n    if (value === '') {\n      value = '0';\n    }\n\n    let minusIndex = value.lastIndexOf('-');\n\n    if (minusIndex > 0) {\n      value = value.replace('-', '');\n      value = '-' + value;\n    }\n\n    if (!isNaN(value)) {\n      setPathToValue(PointsCompletePath, story, parseInt(value));\n    } else if (value === '-') {\n      setPathToValue(PointsCompletePath, story, 0);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    className: classNames.InspectorElement,\n    classes: {\n      root\n    },\n    InputProps: {\n      className: inputRoot\n    },\n    label: label,\n    multiline: true,\n    rowsMax: 3,\n    value: value,\n    variant: \"outlined\",\n    size: \"small\",\n    onChange: event => onChange !== undefined ? onChange(event) : setPathToValue(path, valToChange, event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    className: classNames.InspectorElement,\n    classes: {\n      root\n    },\n    InputProps: {\n      className: inputRoot\n    },\n    label: 'Answer Points',\n    value: pointsValue,\n    variant: \"outlined\",\n    size: \"small\",\n    onChange: event => setNumberField(event.target.value, pointsValToChange),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default InputFragment;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/InputFragment.js"],"names":["React","TextField","makeStyles","useEditor","useStyles","theme","root","width","inputRoot","paddingRight","spacing","InputFragment","classNames","path","fragmentSpecificProps","valToChange","label","onChange","pointsPath","pointsValToChange","getFromPath","setPathToValue","value","PointsCompletePath","concat","pointsValue","setNumberField","story","minusIndex","lastIndexOf","replace","isNaN","parseInt","InspectorElement","className","event","undefined","target"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { TextField, makeStyles } from '@material-ui/core';\nimport { useEditor } from '../../context/EditorContext';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '25ch',\n  },\n  inputRoot: {\n    paddingRight: theme.spacing(2),\n  },\n}));\n\nconst InputFragment = ({ classNames, path, fragmentSpecificProps }) => {\n  const { root, inputRoot } = useStyles();\n  const {\n    valToChange,\n    label,\n    onChange,\n    pointsPath,\n    pointsValToChange,\n  } = fragmentSpecificProps;\n  const { getFromPath, setPathToValue } = useEditor();\n  path = path || [];\n  const value = getFromPath(path)[valToChange];\n  const PointsCompletePath = path.concat(pointsPath);\n  const pointsValue = getFromPath(PointsCompletePath)[pointsValToChange];\n  const setNumberField = (value, story) => {\n    if (value === '') {\n      value = '0';\n    }\n    let minusIndex = value.lastIndexOf('-');\n    if (minusIndex > 0) {\n      value = value.replace('-', '');\n      value = '-' + value;\n    }\n\n    if (!isNaN(value)) {\n      setPathToValue(PointsCompletePath, story, parseInt(value));\n    } else if (value === '-') {\n      setPathToValue(PointsCompletePath, story, 0);\n    }\n  };\n\n  return (\n    <div>\n      <TextField\n        className={classNames.InspectorElement}\n        classes={{ root }}\n        InputProps={{\n          className: inputRoot,\n        }}\n        label={label}\n        multiline={true}\n        rowsMax={3}\n        value={value}\n        variant=\"outlined\"\n        size=\"small\"\n        onChange={event =>\n          onChange !== undefined\n            ? onChange(event)\n            : setPathToValue(path, valToChange, event.target.value)\n        }\n      />\n      <TextField\n        className={classNames.InspectorElement}\n        classes={{ root }}\n        InputProps={{\n          className: inputRoot,\n        }}\n        label={'Answer Points'}\n        value={pointsValue}\n        variant=\"outlined\"\n        size=\"small\"\n        onChange={event => setNumberField(event.target.value, pointsValToChange)}\n      />\n    </div>\n  );\n};\n\nexport default InputFragment;\n"]},"metadata":{},"sourceType":"module"}