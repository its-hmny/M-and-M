{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Editor/Providers.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Typography } from '@material-ui/core';\nimport { EditorProvider } from './context/EditorContext';\nimport axios, { useQuery } from '../common/shared';\nimport * as ROUTES from '../routes';\n\nconst Providers = ({\n  children\n}) => {\n  const {\n    storyId\n  } = useQuery();\n  const location = useLocation();\n  const history = useHistory();\n  const [story, setStory] = useState();\n  const [loadedStory, setLoadedStory] = useState(false);\n  useEffect(() => {\n    const fetchStory = async () => {\n      try {\n        if (storyId !== undefined) {\n          const res = await axios.get(`stories/${storyId}`);\n          const newStory = res.data.payload;\n          setStory(newStory);\n          setLoadedStory(true);\n        } else {\n          history.push(ROUTES.NOTFOUND);\n        }\n      } catch (err) {\n        console.error(err);\n        history.push(ROUTES.NOTFOUND);\n      }\n    };\n\n    fetchStory();\n  }, [storyId, history, location]);\n\n  if (!loadedStory) {\n    return /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(EditorProvider, {\n    userStory: story,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 10\n    }\n  }, children);\n};\n\nexport default Providers;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Editor/Providers.js"],"names":["React","useState","useEffect","useHistory","useLocation","Typography","EditorProvider","axios","useQuery","ROUTES","Providers","children","storyId","location","history","story","setStory","loadedStory","setLoadedStory","fetchStory","undefined","res","get","newStory","data","payload","push","NOTFOUND","err","console","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,kBAAxC;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,SAASC,cAAT,QAA+B,yBAA/B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAO,KAAKC,MAAZ,MAAwB,WAAxB;;AAEA,MAAMC,SAAS,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAClC,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,QAAQ,EAA5B;AACA,QAAMK,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAMU,OAAO,GAAGX,UAAU,EAA1B;AAEA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,EAAlC;AACA,QAAM,CAACgB,WAAD,EAAcC,cAAd,IAAgCjB,QAAQ,CAAC,KAAD,CAA9C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,UAAU,GAAG,YAAY;AAC7B,UAAI;AACF,YAAIP,OAAO,KAAKQ,SAAhB,EAA2B;AACzB,gBAAMC,GAAG,GAAG,MAAMd,KAAK,CAACe,GAAN,CAAW,WAAUV,OAAQ,EAA7B,CAAlB;AACA,gBAAMW,QAAQ,GAAGF,GAAG,CAACG,IAAJ,CAASC,OAA1B;AACAT,UAAAA,QAAQ,CAACO,QAAD,CAAR;AACAL,UAAAA,cAAc,CAAC,IAAD,CAAd;AACD,SALD,MAKO;AACLJ,UAAAA,OAAO,CAACY,IAAR,CAAajB,MAAM,CAACkB,QAApB;AACD;AACF,OATD,CASE,OAAOC,GAAP,EAAY;AACZC,QAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACAd,QAAAA,OAAO,CAACY,IAAR,CAAajB,MAAM,CAACkB,QAApB;AACD;AACF,KAdD;;AAgBAR,IAAAA,UAAU;AACX,GAlBQ,EAkBN,CAACP,OAAD,EAAUE,OAAV,EAAmBD,QAAnB,CAlBM,CAAT;;AAoBA,MAAI,CAACI,WAAL,EAAkB;AAChB,wBAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AAED,sBAAO,oBAAC,cAAD;AAAgB,IAAA,SAAS,EAAEF,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmCJ,QAAnC,CAAP;AACD,CAjCD;;AAmCA,eAAeD,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { Typography } from '@material-ui/core';\n\nimport { EditorProvider } from './context/EditorContext';\nimport axios, { useQuery } from '../common/shared';\nimport * as ROUTES from '../routes';\n\nconst Providers = ({ children }) => {\n  const { storyId } = useQuery();\n  const location = useLocation();\n  const history = useHistory();\n\n  const [story, setStory] = useState();\n  const [loadedStory, setLoadedStory] = useState(false);\n\n  useEffect(() => {\n    const fetchStory = async () => {\n      try {\n        if (storyId !== undefined) {\n          const res = await axios.get(`stories/${storyId}`);\n          const newStory = res.data.payload;\n          setStory(newStory);\n          setLoadedStory(true);\n        } else {\n          history.push(ROUTES.NOTFOUND);\n        }\n      } catch (err) {\n        console.error(err);\n        history.push(ROUTES.NOTFOUND);\n      }\n    };\n\n    fetchStory();\n  }, [storyId, history, location]);\n\n  if (!loadedStory) {\n    return <Typography>Loading...</Typography>;\n  }\n\n  return <EditorProvider userStory={story}>{children}</EditorProvider>;\n};\n\nexport default Providers;\n"]},"metadata":{},"sourceType":"module"}