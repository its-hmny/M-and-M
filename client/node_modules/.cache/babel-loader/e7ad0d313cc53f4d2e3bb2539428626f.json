{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/common/Elements/MultiAnsChoices.js\";\n\n/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { useState, useMemo, useEffect } from 'react';\nimport { Checkbox } from './Choice';\nimport Button from './Button';\n/** renders a multiple choice component: checkbox\n * PARTS:\n *  - Choice -> input checkbox;\n *  - Button (submit);\n *\n * STYLE SECTIONS:\n *  - Checkbox\n *  - Button\n */\n\nexport const ANSWER_VALUE = {\n  CORRECT: '[CORRECT]',\n  WRONG: '[WRONG]'\n};\nconst base = css`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 5px;\n  > div {\n    margin-bottom: 1rem;\n    width: 100%;\n  }\n`;\n\nconst noop = () => {};\n\nfunction MultiAnsChoices({\n  name,\n  answers,\n  withSubmit,\n  style,\n  onSubmit = noop,\n  initialValue = []\n}) {\n  const [selectedAnswers, setSelectedAnswers] = useState(initialValue);\n  const correctAnswers = useMemo(() => answers.filter(answer => answer.value === ANSWER_VALUE.CORRECT).map(answer => answer.id).sort(), [answers]);\n  const isCorrect = useMemo(() => {\n    const correctLength = correctAnswers.length === selectedAnswers.length;\n    const allCorrect = selectedAnswers.sort().every((answerId, index) => answerId === correctAnswers[index]);\n    return correctLength && allCorrect ? ANSWER_VALUE.CORRECT : ANSWER_VALUE.WRONG;\n  }, [correctAnswers, selectedAnswers]);\n\n  const handleSelected = event => {\n    // updated selectedAnswers according to user input\n    const {\n      id\n    } = event.target;\n    setSelectedAnswers(event.target.checked ? [...selectedAnswers, id] : selectedAnswers.filter(answerId => answerId !== id));\n  };\n\n  useEffect(() => {\n    if (!withSubmit && correctAnswers.length === selectedAnswers.length) {\n      onSubmit(isCorrect, answers.filter(answer => selectedAnswers.includes(answer.id)));\n    }\n  }, [withSubmit, onSubmit, isCorrect, correctAnswers, answers, selectedAnswers]);\n  return jsx(\"div\", {\n    css: [base, style],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }\n  }, answers.map(({\n    id,\n    text\n  }) => jsx(Checkbox, {\n    key: id,\n    id: id,\n    name: name,\n    label: text,\n    selected: selectedAnswers.find(answerId => answerId === id),\n    onSelected: handleSelected,\n    style: style && style.Checkbox,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }))), withSubmit && jsx(Button, {\n    disabled: !(selectedAnswers.length > 0),\n    onClick: () => onSubmit(isCorrect, answers.filter(answer => selectedAnswers.includes(answer.id))),\n    style: style && style.Button,\n    text: \"Conferma\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default MultiAnsChoices;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/common/Elements/MultiAnsChoices.js"],"names":["css","jsx","useState","useMemo","useEffect","Checkbox","Button","ANSWER_VALUE","CORRECT","WRONG","base","noop","MultiAnsChoices","name","answers","withSubmit","style","onSubmit","initialValue","selectedAnswers","setSelectedAnswers","correctAnswers","filter","answer","value","map","id","sort","isCorrect","correctLength","length","allCorrect","every","answerId","index","handleSelected","event","target","checked","includes","text","find"],"mappings":"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","sourcesContent":["/** @jsx jsx */\nimport { css, jsx } from '@emotion/core';\nimport { useState, useMemo, useEffect } from 'react';\nimport { Checkbox } from './Choice';\nimport Button from './Button';\n\n/** renders a multiple choice component: checkbox\n * PARTS:\n *  - Choice -> input checkbox;\n *  - Button (submit);\n *\n * STYLE SECTIONS:\n *  - Checkbox\n *  - Button\n */\n\nexport const ANSWER_VALUE = {\n  CORRECT: '[CORRECT]',\n  WRONG: '[WRONG]',\n};\n\nconst base = css`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 5px;\n  > div {\n    margin-bottom: 1rem;\n    width: 100%;\n  }\n`;\n\nconst noop = () => {};\n\nfunction MultiAnsChoices({\n  name,\n  answers,\n  withSubmit,\n  style,\n  onSubmit = noop,\n  initialValue = [],\n}) {\n  const [selectedAnswers, setSelectedAnswers] = useState(initialValue);\n\n  const correctAnswers = useMemo(\n    () =>\n      answers\n        .filter(answer => answer.value === ANSWER_VALUE.CORRECT)\n        .map(answer => answer.id)\n        .sort(),\n    [answers]\n  );\n\n  const isCorrect = useMemo(() => {\n    const correctLength = correctAnswers.length === selectedAnswers.length;\n    const allCorrect = selectedAnswers\n      .sort()\n      .every((answerId, index) => answerId === correctAnswers[index]);\n    return correctLength && allCorrect ? ANSWER_VALUE.CORRECT : ANSWER_VALUE.WRONG;\n  }, [correctAnswers, selectedAnswers]);\n\n  const handleSelected = event => {\n    // updated selectedAnswers according to user input\n    const { id } = event.target;\n    setSelectedAnswers(\n      event.target.checked\n        ? [...selectedAnswers, id]\n        : selectedAnswers.filter(answerId => answerId !== id)\n    );\n  };\n\n  useEffect(() => {\n    if (!withSubmit && correctAnswers.length === selectedAnswers.length) {\n      onSubmit(\n        isCorrect,\n        answers.filter(answer => selectedAnswers.includes(answer.id))\n      );\n    }\n  }, [withSubmit, onSubmit, isCorrect, correctAnswers, answers, selectedAnswers]);\n\n  return (\n    <div css={[base, style]}>\n      <div>\n        {answers.map(({ id, text }) => (\n          <Checkbox\n            key={id}\n            id={id}\n            name={name}\n            label={text}\n            selected={selectedAnswers.find(answerId => answerId === id)}\n            onSelected={handleSelected}\n            style={style && style.Checkbox}\n          />\n        ))}\n      </div>\n\n      {withSubmit && (\n        <Button\n          disabled={!(selectedAnswers.length > 0)}\n          onClick={() =>\n            onSubmit(\n              isCorrect,\n              answers.filter(answer => selectedAnswers.includes(answer.id))\n            )\n          }\n          style={style && style.Button}\n          text=\"Conferma\"\n        />\n      )}\n    </div>\n  );\n}\nexport default MultiAnsChoices;\n"]},"metadata":{},"sourceType":"module"}