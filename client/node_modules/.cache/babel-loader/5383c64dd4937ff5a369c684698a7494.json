{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/FilePickerFragment.js\";\nimport React, { useState, useMemo } from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport shortid from 'shortid';\nimport { useEditor } from '../../context/EditorContext';\nimport axios from '../../../common/shared';\nimport { SERVER_URL } from '../../../common/constants';\n\nconst FilePickerFragment = props => {\n  const {\n    classNames,\n    path,\n    fragmentSpecificProps\n  } = props;\n  const {\n    valToChange,\n    acceptedFileType,\n    buttonLabel\n  } = fragmentSpecificProps;\n  const {\n    setPathToValue,\n    getFromPath\n  } = useEditor();\n  const [uploadOutcome, setOutcome] = useState('');\n  const inputId = useMemo(() => shortid.generate(), []);\n\n  const loadToServer = toUpload => {\n    if (!toUpload) return;\n    const formData = new FormData();\n    formData.append('file', toUpload);\n    const oldResourceId = getFromPath(path)[valToChange].split('/').slice(-1)[0];\n    axios.delete(`resources/${oldResourceId}`).then(response => console.log(response.data)).catch(error => console.log(error));\n    axios.put('resources/', formData, {\n      headers: {\n        'Content-Type': toUpload.type\n      }\n    }).then(response => {\n      setPathToValue(path, valToChange, `${SERVER_URL}/resources/${response.data.uuid}`);\n      setOutcome('File uploaded successfully!');\n    }).catch(error => {\n      console.log(error.data);\n      setOutcome('Error occured while loading!');\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classNames.InspectorElement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: inputId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    style: {\n      display: 'none'\n    },\n    id: inputId,\n    type: \"file\",\n    accept: acceptedFileType,\n    onChange: evt => loadToServer(evt.target.files[0]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    variant: \"contained\",\n    component: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, buttonLabel)), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }, uploadOutcome));\n};\n\nexport default FilePickerFragment;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/FilePickerFragment.js"],"names":["React","useState","useMemo","Button","Typography","shortid","useEditor","axios","SERVER_URL","FilePickerFragment","props","classNames","path","fragmentSpecificProps","valToChange","acceptedFileType","buttonLabel","setPathToValue","getFromPath","uploadOutcome","setOutcome","inputId","generate","loadToServer","toUpload","formData","FormData","append","oldResourceId","split","slice","delete","then","response","console","log","data","catch","error","put","headers","type","uuid","InspectorElement","display","evt","target","files"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { Button, Typography } from '@material-ui/core';\nimport shortid from 'shortid';\n\nimport { useEditor } from '../../context/EditorContext';\nimport axios from '../../../common/shared';\nimport { SERVER_URL } from '../../../common/constants';\n\nconst FilePickerFragment = props => {\n  const { classNames, path, fragmentSpecificProps } = props;\n  const { valToChange, acceptedFileType, buttonLabel } = fragmentSpecificProps;\n  const { setPathToValue, getFromPath } = useEditor();\n  const [uploadOutcome, setOutcome] = useState('');\n\n  const inputId = useMemo(() => shortid.generate(), []);\n\n  const loadToServer = toUpload => {\n    if (!toUpload) return;\n    const formData = new FormData();\n    formData.append('file', toUpload);\n\n    const oldResourceId = getFromPath(path)[valToChange].split('/').slice(-1)[0];\n\n    axios\n      .delete(`resources/${oldResourceId}`)\n      .then(response => console.log(response.data))\n      .catch(error => console.log(error));\n\n    axios\n      .put('resources/', formData, {\n        headers: { 'Content-Type': toUpload.type },\n      })\n      .then(response => {\n        setPathToValue(\n          path,\n          valToChange,\n          `${SERVER_URL}/resources/${response.data.uuid}`\n        );\n        setOutcome('File uploaded successfully!');\n      })\n      .catch(error => {\n        console.log(error.data);\n        setOutcome('Error occured while loading!');\n      });\n  };\n\n  return (\n    <div className={classNames.InspectorElement}>\n      <label htmlFor={inputId}>\n        <input\n          style={{ display: 'none' }}\n          id={inputId}\n          type=\"file\"\n          accept={acceptedFileType}\n          onChange={evt => loadToServer(evt.target.files[0])}\n        />\n        <Button color=\"primary\" variant=\"contained\" component=\"span\">\n          {buttonLabel}\n        </Button>\n      </label>\n      <Typography variant=\"subtitle1\">{uploadOutcome}</Typography>\n    </div>\n  );\n};\n\nexport default FilePickerFragment;\n"]},"metadata":{},"sourceType":"module"}