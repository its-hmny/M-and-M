{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Editor/context/EditorContext.js\";\nimport React, { useContext, useState } from 'react';\nconst EditorContext = React.createContext();\nexport const EditorProvider = ({\n  children,\n  userStory\n}) => {\n  const [inProgressStory, setStory] = useState(userStory);\n  const [focusedNode, setFocusedNode] = useState(undefined);\n  const toProvide = {\n    story: inProgressStory,\n    workingActivity: focusedNode,\n    saveStory: updatedStory => setStory(updatedStory),\n    setWorkingActivity: activityID => setFocusedNode(activityID),\n    getFromPath: path => {\n      let current = inProgressStory.nodes.find(node => node.id === focusedNode);\n      path.forEach(key => {\n        if (!current[key]) {\n          current[key] = {};\n        }\n\n        current = current[key];\n      });\n      return current;\n    },\n    setPathToValue: (path, field, value, optNodeId = undefined) => {\n      /* \n        path is the path to the current fragment in the story, \n        field is the name of the key inside the object that has to be modified,\n        value is the value that has to overwrite the previous one\n        Ex. components -> 0 (first component) -> children -> 1 (second component)\n      */\n      let current = inProgressStory.nodes.find(node => node.id === (optNodeId || focusedNode));\n      path.forEach(key => {\n        if (!current[key]) {\n          current[key] = {};\n        }\n\n        current = current[key];\n      });\n      current[field] = value;\n      setStory({ ...inProgressStory\n      });\n    }\n  };\n  return /*#__PURE__*/React.createElement(EditorContext.Provider, {\n    value: toProvide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 10\n    }\n  }, children);\n};\nexport const useEditor = () => {\n  const value = useContext(EditorContext);\n\n  if (value == null) {\n    throw new Error('useEditor must be used inside an EditorProvider');\n  }\n\n  return value;\n};","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Editor/context/EditorContext.js"],"names":["React","useContext","useState","EditorContext","createContext","EditorProvider","children","userStory","inProgressStory","setStory","focusedNode","setFocusedNode","undefined","toProvide","story","workingActivity","saveStory","updatedStory","setWorkingActivity","activityID","getFromPath","path","current","nodes","find","node","id","forEach","key","setPathToValue","field","value","optNodeId","useEditor","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AAEA,MAAMC,aAAa,GAAGH,KAAK,CAACI,aAAN,EAAtB;AAEA,OAAO,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAD,KAA6B;AACzD,QAAM,CAACC,eAAD,EAAkBC,QAAlB,IAA8BP,QAAQ,CAACK,SAAD,CAA5C;AACA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAACU,SAAD,CAA9C;AAEA,QAAMC,SAAS,GAAG;AAChBC,IAAAA,KAAK,EAAEN,eADS;AAEhBO,IAAAA,eAAe,EAAEL,WAFD;AAIhBM,IAAAA,SAAS,EAAEC,YAAY,IAAIR,QAAQ,CAACQ,YAAD,CAJnB;AAKhBC,IAAAA,kBAAkB,EAAEC,UAAU,IAAIR,cAAc,CAACQ,UAAD,CALhC;AAOhBC,IAAAA,WAAW,EAAEC,IAAI,IAAI;AACnB,UAAIC,OAAO,GAAGd,eAAe,CAACe,KAAhB,CAAsBC,IAAtB,CAA2BC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYhB,WAA/C,CAAd;AAEAW,MAAAA,IAAI,CAACM,OAAL,CAAaC,GAAG,IAAI;AAClB,YAAI,CAACN,OAAO,CAACM,GAAD,CAAZ,EAAmB;AACjBN,UAAAA,OAAO,CAACM,GAAD,CAAP,GAAe,EAAf;AACD;;AAEDN,QAAAA,OAAO,GAAGA,OAAO,CAACM,GAAD,CAAjB;AACD,OAND;AAOA,aAAON,OAAP;AACD,KAlBe;AAoBhBO,IAAAA,cAAc,EAAE,CAACR,IAAD,EAAOS,KAAP,EAAcC,KAAd,EAAqBC,SAAS,GAAGpB,SAAjC,KAA+C;AAC7D;AACN;AACA;AACA;AACA;AACA;AAEM,UAAIU,OAAO,GAAGd,eAAe,CAACe,KAAhB,CAAsBC,IAAtB,CACZC,IAAI,IAAIA,IAAI,CAACC,EAAL,MAAaM,SAAS,IAAItB,WAA1B,CADI,CAAd;AAIAW,MAAAA,IAAI,CAACM,OAAL,CAAaC,GAAG,IAAI;AAClB,YAAI,CAACN,OAAO,CAACM,GAAD,CAAZ,EAAmB;AACjBN,UAAAA,OAAO,CAACM,GAAD,CAAP,GAAe,EAAf;AACD;;AAEDN,QAAAA,OAAO,GAAGA,OAAO,CAACM,GAAD,CAAjB;AACD,OAND;AAOAN,MAAAA,OAAO,CAACQ,KAAD,CAAP,GAAiBC,KAAjB;AACAtB,MAAAA,QAAQ,CAAC,EAAE,GAAGD;AAAL,OAAD,CAAR;AACD;AAzCe,GAAlB;AA4CA,sBAAO,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEK,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA2CP,QAA3C,CAAP;AACD,CAjDM;AAmDP,OAAO,MAAM2B,SAAS,GAAG,MAAM;AAC7B,QAAMF,KAAK,GAAG9B,UAAU,CAACE,aAAD,CAAxB;;AACA,MAAI4B,KAAK,IAAI,IAAb,EAAmB;AACjB,UAAM,IAAIG,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAED,SAAOH,KAAP;AACD,CAPM","sourcesContent":["import React, { useContext, useState } from 'react';\n\nconst EditorContext = React.createContext();\n\nexport const EditorProvider = ({ children, userStory }) => {\n  const [inProgressStory, setStory] = useState(userStory);\n  const [focusedNode, setFocusedNode] = useState(undefined);\n\n  const toProvide = {\n    story: inProgressStory,\n    workingActivity: focusedNode,\n\n    saveStory: updatedStory => setStory(updatedStory),\n    setWorkingActivity: activityID => setFocusedNode(activityID),\n\n    getFromPath: path => {\n      let current = inProgressStory.nodes.find(node => node.id === focusedNode);\n\n      path.forEach(key => {\n        if (!current[key]) {\n          current[key] = {};\n        }\n\n        current = current[key];\n      });\n      return current;\n    },\n\n    setPathToValue: (path, field, value, optNodeId = undefined) => {\n      /* \n        path is the path to the current fragment in the story, \n        field is the name of the key inside the object that has to be modified,\n        value is the value that has to overwrite the previous one\n        Ex. components -> 0 (first component) -> children -> 1 (second component)\n      */\n\n      let current = inProgressStory.nodes.find(\n        node => node.id === (optNodeId || focusedNode)\n      );\n\n      path.forEach(key => {\n        if (!current[key]) {\n          current[key] = {};\n        }\n\n        current = current[key];\n      });\n      current[field] = value;\n      setStory({ ...inProgressStory });\n    },\n  };\n\n  return <EditorContext.Provider value={toProvide}>{children}</EditorContext.Provider>;\n};\n\nexport const useEditor = () => {\n  const value = useContext(EditorContext);\n  if (value == null) {\n    throw new Error('useEditor must be used inside an EditorProvider');\n  }\n\n  return value;\n};\n"]},"metadata":{},"sourceType":"module"}