{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Evaluator/components/ProgressGraph.js\";\nimport React, { useCallback, useEffect, useRef } from 'react';\nimport Graph from '../../common/Graph';\nimport { Options, getGraphFromStory, highlightPath } from '../../Editor/components/GraphCanvas/GraphPreferences';\nimport { useEvaluator } from '../context/EvaluatorContext';\n\nconst ProgressGraph = () => {\n  const {\n    story,\n    selectedPlayer\n  } = useEvaluator();\n  const playerPath = selectedPlayer ? selectedPlayer.history : [];\n  const networkRef = useRef();\n  const containerRef = useRef();\n  useEffect(() => {\n    const resizeHandler = () => {\n      if (containerRef.current && networkRef.current) {\n        const {\n          x,\n          y\n        } = containerRef.current.getBoundingClientRect().toJSON();\n        networkRef.current.setOptions({\n          width: `${window.innerWidth - x}px`,\n          height: `${window.innerHeight - y}px`\n        });\n      }\n    };\n\n    resizeHandler();\n    window.addEventListener('resize', resizeHandler);\n    return () => window.removeEventListener('resize', resizeHandler);\n  }, []);\n  const getNetwork = useCallback(network => networkRef.current = network, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: containerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Graph, {\n    data: highlightPath({ ...getGraphFromStory(story)\n    }, playerPath),\n    options: Options,\n    getNetwork: getNetwork,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ProgressGraph;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Evaluator/components/ProgressGraph.js"],"names":["React","useCallback","useEffect","useRef","Graph","Options","getGraphFromStory","highlightPath","useEvaluator","ProgressGraph","story","selectedPlayer","playerPath","history","networkRef","containerRef","resizeHandler","current","x","y","getBoundingClientRect","toJSON","setOptions","width","window","innerWidth","height","innerHeight","addEventListener","removeEventListener","getNetwork","network"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,MAAxC,QAAsD,OAAtD;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SACEC,OADF,EAEEC,iBAFF,EAGEC,aAHF,QAIO,sDAJP;AAKA,SAASC,YAAT,QAA6B,6BAA7B;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAA4BH,YAAY,EAA9C;AACA,QAAMI,UAAU,GAAGD,cAAc,GAAGA,cAAc,CAACE,OAAlB,GAA4B,EAA7D;AAEA,QAAMC,UAAU,GAAGX,MAAM,EAAzB;AACA,QAAMY,YAAY,GAAGZ,MAAM,EAA3B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMc,aAAa,GAAG,MAAM;AAC1B,UAAID,YAAY,CAACE,OAAb,IAAwBH,UAAU,CAACG,OAAvC,EAAgD;AAC9C,cAAM;AAAEC,UAAAA,CAAF;AAAKC,UAAAA;AAAL,YAAWJ,YAAY,CAACE,OAAb,CAAqBG,qBAArB,GAA6CC,MAA7C,EAAjB;AAEAP,QAAAA,UAAU,CAACG,OAAX,CAAmBK,UAAnB,CAA8B;AAC5BC,UAAAA,KAAK,EAAG,GAAEC,MAAM,CAACC,UAAP,GAAoBP,CAAE,IADJ;AAE5BQ,UAAAA,MAAM,EAAG,GAAEF,MAAM,CAACG,WAAP,GAAqBR,CAAE;AAFN,SAA9B;AAID;AACF,KATD;;AAWAH,IAAAA,aAAa;AAEbQ,IAAAA,MAAM,CAACI,gBAAP,CAAwB,QAAxB,EAAkCZ,aAAlC;AACA,WAAO,MAAMQ,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCb,aAArC,CAAb;AACD,GAhBQ,EAgBN,EAhBM,CAAT;AAkBA,QAAMc,UAAU,GAAG7B,WAAW,CAAC8B,OAAO,IAAKjB,UAAU,CAACG,OAAX,GAAqBc,OAAlC,EAA4C,EAA5C,CAA9B;AAEA,sBACE;AAAK,IAAA,GAAG,EAAEhB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,IAAI,EAAER,aAAa,CAAC,EAAE,GAAGD,iBAAiB,CAACI,KAAD;AAAtB,KAAD,EAAkCE,UAAlC,CADrB;AAEE,IAAA,OAAO,EAAEP,OAFX;AAGE,IAAA,UAAU,EAAEyB,UAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AASD,CApCD;;AAsCA,eAAerB,aAAf","sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\nimport Graph from '../../common/Graph';\nimport {\n  Options,\n  getGraphFromStory,\n  highlightPath,\n} from '../../Editor/components/GraphCanvas/GraphPreferences';\nimport { useEvaluator } from '../context/EvaluatorContext';\n\nconst ProgressGraph = () => {\n  const { story, selectedPlayer } = useEvaluator();\n  const playerPath = selectedPlayer ? selectedPlayer.history : [];\n\n  const networkRef = useRef();\n  const containerRef = useRef();\n\n  useEffect(() => {\n    const resizeHandler = () => {\n      if (containerRef.current && networkRef.current) {\n        const { x, y } = containerRef.current.getBoundingClientRect().toJSON();\n\n        networkRef.current.setOptions({\n          width: `${window.innerWidth - x}px`,\n          height: `${window.innerHeight - y}px`,\n        });\n      }\n    };\n\n    resizeHandler();\n\n    window.addEventListener('resize', resizeHandler);\n    return () => window.removeEventListener('resize', resizeHandler);\n  }, []);\n\n  const getNetwork = useCallback(network => (networkRef.current = network), []);\n\n  return (\n    <div ref={containerRef}>\n      <Graph\n        data={highlightPath({ ...getGraphFromStory(story) }, playerPath)}\n        options={Options}\n        getNetwork={getNetwork}\n      />\n    </div>\n  );\n};\n\nexport default ProgressGraph;\n"]},"metadata":{},"sourceType":"module"}