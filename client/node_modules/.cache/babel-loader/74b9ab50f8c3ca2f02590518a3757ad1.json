{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Creator/Settings/ButtonGroupSettings.js\";\nimport React, { useMemo, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Add as AddIcon } from '@material-ui/icons';\nimport useTemplateStore from '../stores/template';\nimport SettingsItem from '../components/SettingsItem';\nimport { DraggableList } from '../components/DraggableList';\nimport useStylesStore from '../stores/styles';\nimport { makeStyles } from '@material-ui/core/styles';\nconst useStyles = makeStyles(theme => ({\n  buttonList: {\n    padding: `0 ${theme.spacing(2)}px ${theme.spacing(1)}px`\n  }\n}));\n\nfunction ButtonGroupSettings({\n  componentId,\n  styleId\n}) {\n  const classes = useStyles(); // buttonGroup styles\n  // eslint-disable-next-line\n\n  const {\n    styles,\n    updateStyle\n  } = useStylesStore(state => ({\n    // buttonGroup has no styles for now, but leaving it in case someone wants to edit\n    // flow, for example, or the background color of the buttonGroup. very simple!\n    styles: state.styles,\n    updateStyle: state.updateStyle\n  })); // contained buttons\n\n  const [currentlyEditing, setCurrentlyEditing] = useState(0);\n\n  const getButtons = state => state.components.find(component => component.id === componentId).children;\n\n  const {\n    buttons,\n    addComponent\n  } = useTemplateStore(state => ({\n    buttons: getButtons(state),\n    addComponent: state.addComponent\n  }));\n  const list = useMemo(() => buttons.map((button, index) => /*#__PURE__*/React.createElement(SettingsItem, {\n    key: button.id,\n    id: button.id,\n    dragIndex: index,\n    component: button,\n    onEditing: isEditing => setCurrentlyEditing(currentlyEditing => isEditing ? currentlyEditing + 1 : currentlyEditing - 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  })), [buttons]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.buttonList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    startIcon: /*#__PURE__*/React.createElement(AddIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 22\n      }\n    }),\n    onClick: () => addComponent('Button', componentId),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, \"Add button\"), /*#__PURE__*/React.createElement(DraggableList, {\n    id: componentId,\n    list: list || [],\n    disabled: currentlyEditing > 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  })));\n}\n\nexport default ButtonGroupSettings;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Creator/Settings/ButtonGroupSettings.js"],"names":["React","useMemo","useState","Button","Add","AddIcon","useTemplateStore","SettingsItem","DraggableList","useStylesStore","makeStyles","useStyles","theme","buttonList","padding","spacing","ButtonGroupSettings","componentId","styleId","classes","styles","updateStyle","state","currentlyEditing","setCurrentlyEditing","getButtons","components","find","component","id","children","buttons","addComponent","list","map","button","index","isEditing"],"mappings":"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","sourcesContent":["import React, { useMemo, useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport { Add as AddIcon } from '@material-ui/icons';\nimport useTemplateStore from '../stores/template';\nimport SettingsItem from '../components/SettingsItem';\nimport { DraggableList } from '../components/DraggableList';\n\nimport useStylesStore from '../stores/styles';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(theme => ({\n  buttonList: {\n    padding: `0 ${theme.spacing(2)}px ${theme.spacing(1)}px`,\n  },\n}));\n\nfunction ButtonGroupSettings({ componentId, styleId }) {\n  const classes = useStyles();\n\n  // buttonGroup styles\n  // eslint-disable-next-line\n  const { styles, updateStyle } = useStylesStore(state => ({\n    // buttonGroup has no styles for now, but leaving it in case someone wants to edit\n    // flow, for example, or the background color of the buttonGroup. very simple!\n    styles: state.styles,\n    updateStyle: state.updateStyle,\n  }));\n\n  // contained buttons\n  const [currentlyEditing, setCurrentlyEditing] = useState(0);\n  const getButtons = state =>\n    state.components.find(component => component.id === componentId).children;\n  const { buttons, addComponent } = useTemplateStore(state => ({\n    buttons: getButtons(state),\n    addComponent: state.addComponent,\n  }));\n\n  const list = useMemo(\n    () =>\n      buttons.map((button, index) => (\n        <SettingsItem\n          key={button.id}\n          id={button.id}\n          dragIndex={index}\n          component={button}\n          onEditing={isEditing =>\n            setCurrentlyEditing(currentlyEditing =>\n              isEditing ? currentlyEditing + 1 : currentlyEditing - 1\n            )\n          }\n        />\n      )),\n    [buttons]\n  );\n\n  return (\n    <div>\n      <div className={classes.buttonList}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          startIcon={<AddIcon />}\n          onClick={() => addComponent('Button', componentId)}\n        >\n          Add button\n        </Button>\n        <DraggableList\n          id={componentId}\n          list={list || []}\n          disabled={currentlyEditing > 0}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default ButtonGroupSettings;\n"]},"metadata":{},"sourceType":"module"}