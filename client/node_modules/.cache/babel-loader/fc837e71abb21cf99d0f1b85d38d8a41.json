{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/TextFieldFragment.js\";\nimport React from 'react';\nimport { TextField, makeStyles } from '@material-ui/core';\nimport { useEditor } from '../../context/EditorContext';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '25ch'\n  },\n  inputRoot: {\n    paddingRight: theme.spacing(2)\n  }\n}));\n\nconst TextFieldFragment = ({\n  classNames,\n  path,\n  fragmentSpecificProps\n}) => {\n  const {\n    root,\n    inputRoot\n  } = useStyles();\n  const {\n    pathAlternative,\n    valToChange,\n    label,\n    onChange\n  } = fragmentSpecificProps;\n  const {\n    getFromPath,\n    setPathToValue\n  } = useEditor(); //Additional field to modify objects or array\n\n  path = pathAlternative ? path.concat(pathAlternative || []) : path || [];\n  const value = getFromPath(path)[valToChange];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    className: classNames.InspectorElement,\n    classes: {\n      root\n    },\n    InputProps: {\n      className: inputRoot\n    },\n    label: label,\n    multiline: true,\n    rowsMax: 3,\n    value: value,\n    variant: \"outlined\",\n    size: \"small\",\n    onChange: event => onChange !== undefined ? onChange(event) : setPathToValue(path, valToChange, event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default TextFieldFragment;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/TextFieldFragment.js"],"names":["React","TextField","makeStyles","useEditor","useStyles","theme","root","width","inputRoot","paddingRight","spacing","TextFieldFragment","classNames","path","fragmentSpecificProps","pathAlternative","valToChange","label","onChange","getFromPath","setPathToValue","concat","value","InspectorElement","className","event","undefined","target"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,mBAAtC;AACA,SAASC,SAAT,QAA0B,6BAA1B;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAACG,KAAK,KAAK;AACrCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE;AADH,GAD+B;AAIrCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,YAAY,EAAEJ,KAAK,CAACK,OAAN,CAAc,CAAd;AADL;AAJ0B,CAAL,CAAN,CAA5B;;AASA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,UAAF;AAAcC,EAAAA,IAAd;AAAoBC,EAAAA;AAApB,CAAD,KAAiD;AACzE,QAAM;AAAER,IAAAA,IAAF;AAAQE,IAAAA;AAAR,MAAsBJ,SAAS,EAArC;AACA,QAAM;AAAEW,IAAAA,eAAF;AAAmBC,IAAAA,WAAnB;AAAgCC,IAAAA,KAAhC;AAAuCC,IAAAA;AAAvC,MAAoDJ,qBAA1D;AACA,QAAM;AAAEK,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAAkCjB,SAAS,EAAjD,CAHyE,CAKzE;;AACAU,EAAAA,IAAI,GAAGE,eAAe,GAAGF,IAAI,CAACQ,MAAL,CAAYN,eAAe,IAAI,EAA/B,CAAH,GAAwCF,IAAI,IAAI,EAAtE;AACA,QAAMS,KAAK,GAAGH,WAAW,CAACN,IAAD,CAAX,CAAkBG,WAAlB,CAAd;AAEA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,EAAEJ,UAAU,CAACW,gBADxB;AAEE,IAAA,OAAO,EAAE;AAAEjB,MAAAA;AAAF,KAFX;AAGE,IAAA,UAAU,EAAE;AACVkB,MAAAA,SAAS,EAAEhB;AADD,KAHd;AAME,IAAA,KAAK,EAAES,KANT;AAOE,IAAA,SAAS,EAAE,IAPb;AAQE,IAAA,OAAO,EAAE,CARX;AASE,IAAA,KAAK,EAAEK,KATT;AAUE,IAAA,OAAO,EAAC,UAVV;AAWE,IAAA,IAAI,EAAC,OAXP;AAYE,IAAA,QAAQ,EAAEG,KAAK,IACbP,QAAQ,KAAKQ,SAAb,GACIR,QAAQ,CAACO,KAAD,CADZ,GAEIL,cAAc,CAACP,IAAD,EAAOG,WAAP,EAAoBS,KAAK,CAACE,MAAN,CAAaL,KAAjC,CAftB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAsBD,CA/BD;;AAiCA,eAAeX,iBAAf","sourcesContent":["import React from 'react';\nimport { TextField, makeStyles } from '@material-ui/core';\nimport { useEditor } from '../../context/EditorContext';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '25ch',\n  },\n  inputRoot: {\n    paddingRight: theme.spacing(2),\n  },\n}));\n\nconst TextFieldFragment = ({ classNames, path, fragmentSpecificProps }) => {\n  const { root, inputRoot } = useStyles();\n  const { pathAlternative, valToChange, label, onChange } = fragmentSpecificProps;\n  const { getFromPath, setPathToValue } = useEditor();\n\n  //Additional field to modify objects or array\n  path = pathAlternative ? path.concat(pathAlternative || []) : path || [];\n  const value = getFromPath(path)[valToChange];\n\n  return (\n    <div>\n      <TextField\n        className={classNames.InspectorElement}\n        classes={{ root }}\n        InputProps={{\n          className: inputRoot,\n        }}\n        label={label}\n        multiline={true}\n        rowsMax={3}\n        value={value}\n        variant=\"outlined\"\n        size=\"small\"\n        onChange={event =>\n          onChange !== undefined\n            ? onChange(event)\n            : setPathToValue(path, valToChange, event.target.value)\n        }\n      />\n    </div>\n  );\n};\n\nexport default TextFieldFragment;\n"]},"metadata":{},"sourceType":"module"}