{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Evaluator/components/EvaluationWidget.js\";\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Paper, Slider, Button, Grid } from '@material-ui/core';\nimport { useEvaluator } from '../context/EvaluatorContext';\nimport Preview from '../../common/Preview';\n\nconst VoteSlider = ({\n  story,\n  player,\n  nodeId\n}) => {\n  const {\n    socket\n  } = useEvaluator();\n  const [vote, setVote] = useState(50);\n\n  const sendVote = () => {\n    socket.emit('eval-pts', {\n      story,\n      senderId: `evaluator${story}`,\n      receiverId: player,\n      points: vote,\n      nodeId\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    alignItems: \"center\",\n    justify: \"center\",\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    spacing: 1,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Slider, {\n    marks: [{\n      value: 0,\n      label: '0 pts'\n    }, {\n      value: 100,\n      label: '100 pts'\n    }],\n    step: 5,\n    disabled: false,\n    min: 0,\n    max: 100,\n    value: vote,\n    valueLabelDisplay: \"auto\",\n    onChange: (_, newVote) => setVote(newVote),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: sendVote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"Submit\")));\n};\n\nconst EvaluationWidget = () => {\n  const {\n    story,\n    storyId,\n    selectedPlayer\n  } = useEvaluator();\n  const [showedNodeId, setNodeToShow] = useState(undefined);\n  useEffect(() => {\n    const {\n      history\n    } = selectedPlayer; // Every time a new player is selected the last completed activity is selected\n\n    const lastCompletedNode = history.length ? history.slice(-1).pop().activityNodeId : undefined;\n    setNodeToShow(lastCompletedNode);\n  }, [selectedPlayer]);\n  const patchedComponents = useMemo(() => {\n    const {\n      history\n    } = selectedPlayer; // Get the plain node in the story object\n\n    let toShow = undefined;\n    const plainNode = story.nodes.find(node => node.id === showedNodeId);\n    if (!plainNode) return [];else toShow = JSON.parse(JSON.stringify(plainNode)); // Get the patch for that node, the patch contains the information added by the player\n\n    let {\n      patchs\n    } = history.find(node => node.activityNodeId === showedNodeId) || {};\n    patchs = patchs || []; // Apply the patchs to each  modified component in the plain node\n    // before showing  it to the evaluator\n\n    patchs.forEach(({\n      componentId,\n      value\n    }) => {\n      const toPatch = toShow.components.find(component => component.id === componentId);\n      if (toPatch) toPatch.initialValue = value;\n    });\n    return toShow.components;\n  }, [showedNodeId, story.nodes, selectedPlayer]);\n\n  const changeNodeToShow = delta => {\n    const {\n      history\n    } = selectedPlayer;\n    const currentIndex = history.findIndex(({\n      activityNodeId\n    }) => activityNodeId === showedNodeId);\n    const updatedIndex = currentIndex + delta;\n\n    if (updatedIndex >= 0 && updatedIndex < history.length) {\n      setNodeToShow(history[updatedIndex].activityNodeId);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(VoteSlider, {\n    story: storyId,\n    player: selectedPlayer.id,\n    nodeId: showedNodeId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    xs: 12,\n    justify: \"space-between\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    small: true,\n    onClick: () => changeNodeToShow(-1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, '<<'), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"primary\",\n    small: true,\n    onClick: () => changeNodeToShow(+1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }\n  }, '>>')), /*#__PURE__*/React.createElement(Preview, {\n    components: patchedComponents,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default EvaluationWidget;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Evaluator/components/EvaluationWidget.js"],"names":["React","useEffect","useMemo","useState","Paper","Slider","Button","Grid","useEvaluator","Preview","VoteSlider","story","player","nodeId","socket","vote","setVote","sendVote","emit","senderId","receiverId","points","value","label","_","newVote","EvaluationWidget","storyId","selectedPlayer","showedNodeId","setNodeToShow","undefined","history","lastCompletedNode","length","slice","pop","activityNodeId","patchedComponents","toShow","plainNode","nodes","find","node","id","JSON","parse","stringify","patchs","forEach","componentId","toPatch","components","component","initialValue","changeNodeToShow","delta","currentIndex","findIndex","updatedIndex"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport { Paper, Slider, Button, Grid } from '@material-ui/core';\n\nimport { useEvaluator } from '../context/EvaluatorContext';\nimport Preview from '../../common/Preview';\n\nconst VoteSlider = ({ story, player, nodeId }) => {\n  const { socket } = useEvaluator();\n  const [vote, setVote] = useState(50);\n\n  const sendVote = () => {\n    socket.emit('eval-pts', {\n      story,\n      senderId: `evaluator${story}`,\n      receiverId: player,\n      points: vote,\n      nodeId,\n    });\n  };\n\n  return (\n    <Grid container alignItems=\"center\" justify=\"center\" spacing={4}>\n      <Grid item spacing={1} xs={8}>\n        <Slider\n          marks={[\n            { value: 0, label: '0 pts' },\n            { value: 100, label: '100 pts' },\n          ]}\n          step={5}\n          disabled={false}\n          min={0}\n          max={100}\n          value={vote}\n          valueLabelDisplay=\"auto\"\n          onChange={(_, newVote) => setVote(newVote)}\n        />\n      </Grid>\n      <Grid item xs={3}>\n        <Button variant=\"contained\" color=\"primary\" onClick={sendVote}>\n          Submit\n        </Button>\n      </Grid>\n    </Grid>\n  );\n};\n\nconst EvaluationWidget = () => {\n  const { story, storyId, selectedPlayer } = useEvaluator();\n  const [showedNodeId, setNodeToShow] = useState(undefined);\n\n  useEffect(() => {\n    const { history } = selectedPlayer;\n    // Every time a new player is selected the last completed activity is selected\n    const lastCompletedNode = history.length\n      ? history.slice(-1).pop().activityNodeId\n      : undefined;\n    setNodeToShow(lastCompletedNode);\n  }, [selectedPlayer]);\n\n  const patchedComponents = useMemo(() => {\n    const { history } = selectedPlayer;\n    // Get the plain node in the story object\n    let toShow = undefined;\n    const plainNode = story.nodes.find(node => node.id === showedNodeId);\n    if (!plainNode) return [];\n    else toShow = JSON.parse(JSON.stringify(plainNode));\n    // Get the patch for that node, the patch contains the information added by the player\n    let { patchs } = history.find(node => node.activityNodeId === showedNodeId) || {};\n    patchs = patchs || [];\n    // Apply the patchs to each  modified component in the plain node\n    // before showing  it to the evaluator\n    patchs.forEach(({ componentId, value }) => {\n      const toPatch = toShow.components.find(component => component.id === componentId);\n      if (toPatch) toPatch.initialValue = value;\n    });\n    return toShow.components;\n  }, [showedNodeId, story.nodes, selectedPlayer]);\n\n  const changeNodeToShow = delta => {\n    const { history } = selectedPlayer;\n    const currentIndex = history.findIndex(\n      ({ activityNodeId }) => activityNodeId === showedNodeId\n    );\n    const updatedIndex = currentIndex + delta;\n    if (updatedIndex >= 0 && updatedIndex < history.length) {\n      setNodeToShow(history[updatedIndex].activityNodeId);\n    }\n  };\n\n  return (\n    <Paper>\n      <VoteSlider story={storyId} player={selectedPlayer.id} nodeId={showedNodeId} />\n      <Grid container xs={12} justify=\"space-between\">\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          small\n          onClick={() => changeNodeToShow(-1)}\n        >\n          {'<<'}\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          small\n          onClick={() => changeNodeToShow(+1)}\n        >\n          {'>>'}\n        </Button>\n      </Grid>\n      <Preview components={patchedComponents} />\n    </Paper>\n  );\n};\n\nexport default EvaluationWidget;\n"]},"metadata":{},"sourceType":"module"}