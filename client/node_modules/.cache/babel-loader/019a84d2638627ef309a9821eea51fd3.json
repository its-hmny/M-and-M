{"ast":null,"code":"var _jsxFileName = \"/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/index.js\";\nimport React, { useMemo } from 'react';\nimport { makeStyles } from '@material-ui/core';\nimport ButtonFragment from './ButtonFragment';\nimport ColorPickerFragment from './ColorPickerFragment';\nimport FilePickerFragment from './FilePickerFragment';\nimport SelectFragment from './SelectFragment';\nimport TextFieldFragment from './TextFieldFragment';\nimport CheckboxFragment from './CheckboxFragment';\nimport AnswerFragment from './AnswerFragment';\nimport RadioFragment from './RadioFragment';\nimport DividerFragment from './DividerFragment';\nimport InputFragment from './InputFragment';\nimport AnswerFragmentImages from './AnswerFragmentImages';\nimport PointsFragment from './PointsFragment';\nconst fragmentsComponents = {\n  ButtonFragment,\n  ColorPickerFragment,\n  FilePickerFragment,\n  SelectFragment,\n  TextFieldFragment,\n  CheckboxFragment,\n  AnswerFragment,\n  RadioFragment,\n  DividerFragment,\n  InputFragment,\n  AnswerFragmentImages,\n  PointsFragment\n};\nconst useStyles = makeStyles({\n  InspectorPaper: {\n    padding: 10,\n    paddingBottom: 20\n  },\n  InspectorElement: {\n    marginTop: 5,\n    marginLeft: 15,\n    boxSizing: 'content-box'\n  },\n  FormControl: {\n    minWidth: 150\n  }\n});\n/* Component loading dynamically EditorFragments based on data passed through \n   fieldsToSet(data comes from ComponentProperties.json).  */\n\nconst DynamicLoadFragments = props => {\n  const {\n    fieldsToSet,\n    pathToVal\n  } = props;\n  const classes = useStyles();\n  const fragmentList = useMemo(() => fieldsToSet.map((item, index) => {\n    const EditorFragment = fragmentsComponents[item.fragment];\n    return /*#__PURE__*/React.createElement(EditorFragment, {\n      key: `${item.fragment}${index}`,\n      path: pathToVal,\n      classNames: classes,\n      fragmentSpecificProps: item.props,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }\n    });\n  }), [fieldsToSet, classes, pathToVal]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, fragmentList);\n};\n\nexport default DynamicLoadFragments;","map":{"version":3,"sources":["/home/hmny/Projects/M-and-M/client/src/Editor/components/EditorFragments/index.js"],"names":["React","useMemo","makeStyles","ButtonFragment","ColorPickerFragment","FilePickerFragment","SelectFragment","TextFieldFragment","CheckboxFragment","AnswerFragment","RadioFragment","DividerFragment","InputFragment","AnswerFragmentImages","PointsFragment","fragmentsComponents","useStyles","InspectorPaper","padding","paddingBottom","InspectorElement","marginTop","marginLeft","boxSizing","FormControl","minWidth","DynamicLoadFragments","props","fieldsToSet","pathToVal","classes","fragmentList","map","item","index","EditorFragment","fragment"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,MAAMC,mBAAmB,GAAG;AAC1BZ,EAAAA,cAD0B;AAE1BC,EAAAA,mBAF0B;AAG1BC,EAAAA,kBAH0B;AAI1BC,EAAAA,cAJ0B;AAK1BC,EAAAA,iBAL0B;AAM1BC,EAAAA,gBAN0B;AAO1BC,EAAAA,cAP0B;AAQ1BC,EAAAA,aAR0B;AAS1BC,EAAAA,eAT0B;AAU1BC,EAAAA,aAV0B;AAW1BC,EAAAA,oBAX0B;AAY1BC,EAAAA;AAZ0B,CAA5B;AAeA,MAAME,SAAS,GAAGd,UAAU,CAAC;AAC3Be,EAAAA,cAAc,EAAE;AACdC,IAAAA,OAAO,EAAE,EADK;AAEdC,IAAAA,aAAa,EAAE;AAFD,GADW;AAM3BC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,SAAS,EAAE,CADK;AAEhBC,IAAAA,UAAU,EAAE,EAFI;AAGhBC,IAAAA,SAAS,EAAE;AAHK,GANS;AAY3BC,EAAAA,WAAW,EAAE;AACXC,IAAAA,QAAQ,EAAE;AADC;AAZc,CAAD,CAA5B;AAiBA;AACA;;AACA,MAAMC,oBAAoB,GAAGC,KAAK,IAAI;AACpC,QAAM;AAAEC,IAAAA,WAAF;AAAeC,IAAAA;AAAf,MAA6BF,KAAnC;AAEA,QAAMG,OAAO,GAAGd,SAAS,EAAzB;AAEA,QAAMe,YAAY,GAAG9B,OAAO,CAC1B,MACE2B,WAAW,CAACI,GAAZ,CAAgB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC/B,UAAMC,cAAc,GAAGpB,mBAAmB,CAACkB,IAAI,CAACG,QAAN,CAA1C;AACA,wBACE,oBAAC,cAAD;AACE,MAAA,GAAG,EAAG,GAAEH,IAAI,CAACG,QAAS,GAAEF,KAAM,EADhC;AAEE,MAAA,IAAI,EAAEL,SAFR;AAGE,MAAA,UAAU,EAAEC,OAHd;AAIE,MAAA,qBAAqB,EAAEG,IAAI,CAACN,KAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAQD,GAVD,CAFwB,EAa1B,CAACC,WAAD,EAAcE,OAAd,EAAuBD,SAAvB,CAb0B,CAA5B;AAgBA,sBAAO,0CAAGE,YAAH,CAAP;AACD,CAtBD;;AAwBA,eAAeL,oBAAf","sourcesContent":["import React, { useMemo } from 'react';\nimport { makeStyles } from '@material-ui/core';\n\nimport ButtonFragment from './ButtonFragment';\nimport ColorPickerFragment from './ColorPickerFragment';\nimport FilePickerFragment from './FilePickerFragment';\nimport SelectFragment from './SelectFragment';\nimport TextFieldFragment from './TextFieldFragment';\nimport CheckboxFragment from './CheckboxFragment';\nimport AnswerFragment from './AnswerFragment';\nimport RadioFragment from './RadioFragment';\nimport DividerFragment from './DividerFragment';\nimport InputFragment from './InputFragment';\nimport AnswerFragmentImages from './AnswerFragmentImages';\nimport PointsFragment from './PointsFragment';\n\nconst fragmentsComponents = {\n  ButtonFragment,\n  ColorPickerFragment,\n  FilePickerFragment,\n  SelectFragment,\n  TextFieldFragment,\n  CheckboxFragment,\n  AnswerFragment,\n  RadioFragment,\n  DividerFragment,\n  InputFragment,\n  AnswerFragmentImages,\n  PointsFragment,\n};\n\nconst useStyles = makeStyles({\n  InspectorPaper: {\n    padding: 10,\n    paddingBottom: 20,\n  },\n\n  InspectorElement: {\n    marginTop: 5,\n    marginLeft: 15,\n    boxSizing: 'content-box',\n  },\n\n  FormControl: {\n    minWidth: 150,\n  },\n});\n\n/* Component loading dynamically EditorFragments based on data passed through \n   fieldsToSet(data comes from ComponentProperties.json).  */\nconst DynamicLoadFragments = props => {\n  const { fieldsToSet, pathToVal } = props;\n\n  const classes = useStyles();\n\n  const fragmentList = useMemo(\n    () =>\n      fieldsToSet.map((item, index) => {\n        const EditorFragment = fragmentsComponents[item.fragment];\n        return (\n          <EditorFragment\n            key={`${item.fragment}${index}`}\n            path={pathToVal}\n            classNames={classes}\n            fragmentSpecificProps={item.props}\n          />\n        );\n      }),\n    [fieldsToSet, classes, pathToVal]\n  );\n\n  return <>{fragmentList}</>;\n};\n\nexport default DynamicLoadFragments;\n"]},"metadata":{},"sourceType":"module"}